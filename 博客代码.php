This XML file does not appear to have any style information associated with it. The document tree is shown below.
<feed xmlns="http://www.w3.org/2005/Atom">
<title type="text">博客园_许明吉博客</title>
<subtitle type="text">C# winForm Delphi 技术交流 Skype:szxumingji</subtitle>
<id>uuid:27fc9aac-5a52-4f2d-9f21-2f058553e976;id=13866</id>
<updated>2012-09-05T06:00:58Z</updated>
<author>
<name>许明吉博客</name>
<uri>http://www.cnblogs.com/jxsoft/</uri>
</author>
<generator>feed.cnblogs.com</generator>
<entry>
<id>
http://www.cnblogs.com/jxsoft/archive/2012/09/05/2671823.html
</id>
<title type="text">浅谈C#中的异步编程 - 许明吉博客</title>
<summary type="text">
实现异步编程有4种方法可供选择，这4种访求实际上也对应着4种异步调用的模式，分为“等待”和“回调”两大类。 Title一、使用EndInvoke； 二、使用WaitHanle； 三、轮询； 四、回调。 一、使用EndInvoke 当使用BeginInvoke异步调用方法时，如果方法未执行完，EndInvoke方法就会一直阻塞，直到被调用的方法执行完毕，如下面的代码： Ellic's Code1 using System; 2 using System.Threading; 3 namespace MetadataSample 4 { 5 class Progra...
</summary>
<published>2012-09-05T06:01:00Z</published>
<updated>2012-09-05T06:01:00Z</updated>
<author>
<name>许明吉博客</name>
<uri>http://www.cnblogs.com/jxsoft/</uri>
</author>
<link rel="alternate" href="http://www.cnblogs.com/jxsoft/archive/2012/09/05/2671823.html"/>
<link rel="alternate" type="text/html" href="http://www.cnblogs.com/jxsoft/archive/2012/09/05/2671823.html"/>
<content type="html">
<p>实现异步编程有4种方法可供选择，这4种访求实际上也对应着4种异步调用的模式，分为&ldquo;等待&rdquo;和&ldquo;回调&rdquo;两大类。<br />　　Title一、使用EndInvoke；<br />　　二、使用WaitHanle；<br />　　三、轮询；<br />　　四、回调。<br />　　一、使用EndInvoke<br />　　当使用BeginInvoke异步调用方法时，如果方法未执行完，EndInvoke方法就会一直阻塞，直到被调用的方法执行完毕，如下面的代码：<br />　　Ellic's Code<br />　</p><div style="background-color: #F5F5F5;border: 1px solid #CCCCCC;padding:10px;"><span style="color: #800080;">1</span> <span style="color: #0000ff;">using</span><span style="color: #000000;"> System;<br/>　　</span><span style="color: #800080;">2</span> <span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Threading;<br/>　　</span><span style="color: #800080;">3</span> <span style="color: #0000ff;">namespace</span><span style="color: #000000;"> MetadataSample<br/>　　</span><span style="color: #800080;">4</span><span style="color: #000000;"> {<br/>　　</span><span style="color: #800080;">5</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Program<br/>　　</span><span style="color: #800080;">6</span><span style="color: #000000;"> {<br/>　　</span><span style="color: #800080;">7</span> <span style="color: #008000;">//</span><span style="color: #008000;">声明一个委托类型</span><br/>　　<span style="color: #800080;">8</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">delegate</span> <span style="color: #0000ff;">void</span> PrintDelegate(<span style="color: #0000ff;">string</span><span style="color: #000000;"> content);<br/>　　</span><span style="color: #800080;">9</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> Main(<span style="color: #0000ff;">string</span><span style="color: #000000;">[] args)<br/>　　</span><span style="color: #800080;">10</span><span style="color: #000000;"> {<br/>　　</span><span style="color: #800080;">11</span> <span style="color: #0000ff;">int</span> threadId =<span style="color: #000000;"> Thread.CurrentThread.ManagedThreadId;<br/>　　</span><span style="color: #800080;">12</span> PrintDelegate printDelegate =<span style="color: #000000;"> Program.Print;<br/>　　</span><span style="color: #800080;">13</span> Console.WriteLine(<span style="color: #800000;">"</span><span style="color: #800000;">[主线程id:{0}]\t开始调用打印方法...</span><span style="color: #800000;">"</span><span style="color: #000000;">,threadId);<br/>　　</span><span style="color: #800080;">14</span> IAsyncResult result = printDelegate.BeginInvoke(<span style="color: #800000;">"</span><span style="color: #800000;">Hello world</span><span style="color: #800000;">"</span>,<span style="color: #0000ff;">null</span>,<span style="color: #0000ff;">null</span><span style="color: #000000;">);<br/>　　</span><span style="color: #800080;">15</span><span style="color: #000000;"> printDelegate.EndInvoke(result);<br/>　　</span><span style="color: #800080;">16</span><br/>　　<span style="color: #800080;">17</span> Console.Write(<span style="color: #800000;">"</span><span style="color: #800000;">Press any key to continue . . . </span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/>　　</span><span style="color: #800080;">18</span> Console.ReadKey(<span style="color: #0000ff;">true</span><span style="color: #000000;">);<br/>　　</span><span style="color: #800080;">19</span><span style="color: #000000;"> }<br/>　　</span><span style="color: #800080;">20</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> Print(<span style="color: #0000ff;">string</span><span style="color: #000000;"> content)<br/>　　</span><span style="color: #800080;">21</span><span style="color: #000000;"> {<br/>　　</span><span style="color: #800080;">22</span> <span style="color: #0000ff;">int</span> threadId=<span style="color: #000000;">Thread.CurrentThread.ManagedThreadId;<br/>　　</span><span style="color: #800080;">23</span> Console.WriteLine(<span style="color: #800000;">"</span><span style="color: #800000;">[当前线程id:{0}]\t{1}</span><span style="color: #800000;">"</span><span style="color: #000000;">,threadId,content);<br/>　　</span><span style="color: #800080;">24</span> System.Threading.Thread.Sleep(<span style="color: #800080;">2000</span><span style="color: #000000;">);<br/>　　</span><span style="color: #800080;">25</span> Console.WriteLine(<span style="color: #800000;">"</span><span style="color: #800000;">[当前线程id:{0}]\t打印方法调用完毕.</span><span style="color: #800000;">"</span><span style="color: #000000;">,threadId);<br/>　　</span><span style="color: #800080;">26</span><span style="color: #000000;"> }<br/>　　</span><span style="color: #800080;">27</span><span style="color: #000000;"> }<br/>　　</span><span style="color: #800080;">28</span> }</div><p>&nbsp;</p><p>　</p><p>　　知识点回顾：<br />　　1、委托类型<br />　　委托类似于C/C++中的函数指针，它能够引用函数，只不过在C#中，委托是一个对象，并且是类型安全的，避免了函数指针的不安全性。一个委托类型的变量可以引用一个或多个方法，这些方法由委托存放于一个调用列表中，当调用一个委托类型的变量即相当于依次调用它的&ldquo;调用列表&rdquo;中的方法。委托是一种引用类型。<br />　　可以被引用的方法必须要满足如下规则：<br />　　&Theta;方法的签名和委托一致，比如方法参数的个数和类型；<br />　　&Theta;方法的返回值和委托一致。<br />　　委托的声明与实例化：<br />　　Ellic's Code<br />　</p><div style="background-color: #F5F5F5;border: 1px solid #CCCCCC;padding:10px;"><span style="color: #800080;">1</span> <span style="color: #0000ff;">using</span><span style="color: #000000;"> System;<br/>　　</span><span style="color: #800080;">2</span> <span style="color: #0000ff;">namespace</span><span style="color: #000000;"> DelegateSample<br/>　　</span><span style="color: #800080;">3</span><span style="color: #000000;"> {<br/>　　</span><span style="color: #800080;">4</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">delegate</span> <span style="color: #0000ff;">void</span> DoProcess(<span style="color: #0000ff;">string</span><span style="color: #000000;"> msg);<br/>　　</span><span style="color: #800080;">5</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> DelegateSample<br/>　　</span><span style="color: #800080;">6</span><span style="color: #000000;"> {<br/>　　</span><span style="color: #800080;">7</span> <span style="color: #0000ff;">void</span> Process(<span style="color: #0000ff;">string</span><span style="color: #000000;"> msg)<br/>　　</span><span style="color: #800080;">8</span><span style="color: #000000;"> {<br/>　　</span><span style="color: #800080;">9</span> Console.WriteLine(<span style="color: #800000;">"</span><span style="color: #800000;">Process:{0}</span><span style="color: #800000;">"</span><span style="color: #000000;">,msg );<br/>　　</span><span style="color: #800080;">10</span><span style="color: #000000;"> }<br/>　　</span><span style="color: #800080;">11</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> Main(<span style="color: #0000ff;">string</span><span style="color: #000000;">[] args)<br/>　　</span><span style="color: #800080;">12</span><span style="color: #000000;"> {<br/>　　</span><span style="color: #800080;">13</span> DelegateSample sample = <span style="color: #0000ff;">new</span><span style="color: #000000;"> DelegateSample();<br/>　　</span><span style="color: #800080;">14</span> DoProcess process = <span style="color: #0000ff;">new</span><span style="color: #000000;"> DoProcess(sample.Process);<br/>　　</span><span style="color: #800080;">15</span> <span style="color: #008000;">//</span><span style="color: #008000;">DoProcess process = sample.Process;</span><br/>　　<span style="color: #800080;">16</span> process(<span style="color: #800000;">"</span><span style="color: #800000;">测试数据</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/>　　</span><span style="color: #800080;">17</span> Console.Write(<span style="color: #800000;">"</span><span style="color: #800000;">Press any key to continue . . . </span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/>　　</span><span style="color: #800080;">18</span> Console.ReadKey(<span style="color: #0000ff;">true</span><span style="color: #000000;">);<br/>　　</span><span style="color: #800080;">19</span><span style="color: #000000;"> }<br/>　　</span><span style="color: #800080;">20</span><span style="color: #000000;"> }<br/>　　</span><span style="color: #800080;">21</span><span style="color: #000000;"> }<br/>　　</span><span style="color: #800080;">2</span><span style="color: #000000;">、IAsyncResult接口<br/>　　IasyncResult接口定义了异步操作状态应该提供的属性，它的源代码如下：<br/>　　</span><span style="color: #800080;">1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span><span style="color: #000000;"> IAsyncResult<br/>　　</span><span style="color: #800080;">2</span><span style="color: #000000;"> {<br/>　　</span><span style="color: #800080;">3</span> <span style="color: #0000ff;">object</span> AsycState{<span style="color: #0000ff;">get</span><span style="color: #000000;">;}<br/>　　</span><span style="color: #800080;">4</span> WaitHandle AsyncWaitHandle{<span style="color: #0000ff;">get</span><span style="color: #000000;">;}<br/>　　</span><span style="color: #800080;">5</span> <span style="color: #0000ff;">bool</span> CompletedSynchronously{<span style="color: #0000ff;">get</span><span style="color: #000000;">;}<br/>　　</span><span style="color: #800080;">6</span> <span style="color: #0000ff;">bool</span> IsCompleted{<span style="color: #0000ff;">get</span><span style="color: #000000;">;}<br/>　　</span><span style="color: #800080;">7</span> }</div><p>&nbsp;</p><p>　</p><p>　　这些属性都是只读属性，它们的含义如下：<br />　　</p><table border="1" cellspacing="0" cellpadding="0" align="center"><tbody><tr><td valign="top" width="189"><p>属性</p></td><td valign="top" width="189"><p>返回类型</p></td><td valign="top" width="189"><p>说明</p></td></tr><tr><td valign="top" width="189"><p><span style="font-family: Calibri;">AsycState</span></p></td><td valign="top" width="189"><p><span style="font-family: Calibri;">object</span></p></td><td valign="top" width="189"><p>此属性返回一个对象，该对象是启动异步操作的方法的最后一个参数</p></td></tr><tr><td valign="top" width="189"><p><span style="font-family: Calibri;">AsyncWaitHandle</span></p></td><td valign="top" width="189"><p><span style="font-family: Calibri;">WaitHandle</span></p></td><td valign="top" width="189"><p>获取用于等待异步操作完成的<span style="font-family: Calibri;">WaitHandle</span></p></td></tr><tr><td valign="top" width="189"><p><span style="font-family: Calibri;">CompletedSynchronously</span></p></td><td valign="top" width="189"><p><span style="font-family: Calibri;">bool</span></p></td><td valign="top" width="189"><p>获取一个值，该值指示异步操作是否同步完成</p></td></tr><tr><td valign="top" width="189"><p><span style="font-family: Calibri;">IsCompleted</span></p></td><td valign="top" width="189"><p><span style="font-family: Calibri;">bool</span></p></td><td valign="top" width="189"><p>获取一个值，该值指示异步操作是否已完成</p></td></tr></tbody></table><p>　　关于IAndsyncResult接口需要补充的是，BeginInvoke方法的返回类型以及EndInvoke方法的唯一参数均为IasyncResult接口类型。<br />　　二、使用WaitHandle<br />　　除了上面提到的方法，我们还可以使用WainHandle类型的WaitOne方法。WaitOne方法有5个重载：<br />　　n bool WaitOne()<br />　　n bool WaitOne(int millisecondsTimeout)<br />　　n bool WaitOne(TimeSpan timeout)<br />　　n bool WaitOne(int millisecondsTimeout, bool exitContext)<br />　　n bool WaitOne(TimeSpan timeout,bool exitContext)<br />　　其中，第一个不带参数的重载相当于WaitOne(-1,false)，第一个参数表示等待的毫秒数，-1表示无限期等待，第二个参数表示在等待前是否退出上下文的同步域，并在稍后进行重新获取，是则为TRUE，否则为FALSE。<br />　　这些重载的核心实现为第四个重载，其他的重载就是对参数类型或个数的改变。运行代码如下：<br />　　Ellic's Code<br />　　</p><div style="background-color: #F5F5F5;border: 1px solid #CCCCCC;padding:10px;"><span style="color: #800080;">1</span> <span style="color: #0000ff;">using</span><span style="color: #000000;"> System;<br/>　　</span><span style="color: #800080;">2</span> <span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Threading;<br/>　　</span><span style="color: #800080;">3</span><br/>　　<span style="color: #800080;">4</span> <span style="color: #0000ff;">namespace</span><span style="color: #000000;"> MetadataSample<br/>　　</span><span style="color: #800080;">5</span><span style="color: #000000;"> {<br/>　　</span><span style="color: #800080;">6</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Program<br/>　　</span><span style="color: #800080;">7</span><span style="color: #000000;"> {<br/>　　</span><span style="color: #800080;">8</span> <span style="color: #008000;">//</span><span style="color: #008000;">声明一个委托类型</span><br/>　　<span style="color: #800080;">9</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">delegate</span> <span style="color: #0000ff;">void</span> PrintDelegate(<span style="color: #0000ff;">string</span><span style="color: #000000;"> content);<br/>　　</span><span style="color: #800080;">10</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> Main(<span style="color: #0000ff;">string</span><span style="color: #000000;">[] args)<br/>　　</span><span style="color: #800080;">11</span><span style="color: #000000;"> {<br/>　　</span><span style="color: #800080;">12</span> <span style="color: #0000ff;">int</span> threadId =<span style="color: #000000;"> Thread.CurrentThread.ManagedThreadId;<br/>　　</span><span style="color: #800080;">13</span> PrintDelegate printDelegate =<span style="color: #000000;"> Program.Print;<br/>　　</span><span style="color: #800080;">14</span> Console.WriteLine(<span style="color: #800000;">"</span><span style="color: #800000;">[主线程id:{0}]\t开始调用打印方法...</span><span style="color: #800000;">"</span><span style="color: #000000;">,threadId);<br/>　　</span><span style="color: #800080;">15</span> IAsyncResult result = printDelegate.BeginInvoke(<span style="color: #800000;">"</span><span style="color: #800000;">Hello world</span><span style="color: #800000;">"</span>,<span style="color: #0000ff;">null</span>,<span style="color: #0000ff;">null</span><span style="color: #000000;">);<br/>　　</span><span style="color: #800080;">16</span> <span style="color: #008000;">//</span><span style="color: #008000;">printDelegate.EndInvoke(result);</span><br/>　　<span style="color: #800080;">17</span> result.AsyncWaitHandle.WaitOne(<span style="color: #800080;">5000</span>,<span style="color: #0000ff;">false</span><span style="color: #000000;">);<br/>　　</span><span style="color: #800080;">18</span><br/>　　<span style="color: #800080;">19</span> Console.Write(<span style="color: #800000;">"</span><span style="color: #800000;">Press any key to continue . . . </span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/>　　</span><span style="color: #800080;">20</span> Console.ReadKey(<span style="color: #0000ff;">true</span><span style="color: #000000;">);<br/>　　</span><span style="color: #800080;">21</span><span style="color: #000000;"> }<br/>　　</span><span style="color: #800080;">22</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> Print(<span style="color: #0000ff;">string</span><span style="color: #000000;"> content)<br/>　　</span><span style="color: #800080;">23</span><span style="color: #000000;"> {<br/>　　</span><span style="color: #800080;">24</span> <span style="color: #0000ff;">int</span> threadId=<span style="color: #000000;">Thread.CurrentThread.ManagedThreadId;<br/>　　</span><span style="color: #800080;">25</span> Console.WriteLine(<span style="color: #800000;">"</span><span style="color: #800000;">[当前线程id:{0}]\t{1}</span><span style="color: #800000;">"</span><span style="color: #000000;">,threadId,content);<br/>　　</span><span style="color: #800080;">26</span> System.Threading.Thread.Sleep(<span style="color: #800080;">2000</span><span style="color: #000000;">);<br/>　　</span><span style="color: #800080;">27</span> Console.WriteLine(<span style="color: #800000;">"</span><span style="color: #800000;">[当前线程id:{0}]\t打印方法调用完毕.</span><span style="color: #800000;">"</span><span style="color: #000000;">,threadId);<br/>　　</span><span style="color: #800080;">28</span><span style="color: #000000;"> }<br/>　　</span><span style="color: #800080;">29</span><span style="color: #000000;"> }<br/>　　</span><span style="color: #800080;">30</span><span style="color: #000000;"> }<br/>　　可以看到，与EndInvoke类似，只是用WaitOne函数代码了EndInvoke而已。<br/>　　三、轮询<br/>　　之前提到的两种方法，只能等下异步方法执行完毕，在完毕之前没有任何提示信息，整个程序就像没有响应一样，用户体验不好，可以通过检查IasyncResult类型的IsCompleted属性来检查异步调用是否完成，如果没有完成，则可以适时地显示一些提示信息，如下面的代码：<br/>　　Ellic</span><span style="color: #800000;">'</span><span style="color: #800000;">s Code</span><br/>　　<span style="color: #800080;">1</span> <span style="color: #0000ff;">using</span><span style="color: #000000;"> System;<br/>　　</span><span style="color: #800080;">2</span> <span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Threading;<br/>　　</span><span style="color: #800080;">3</span> <span style="color: #0000ff;">namespace</span><span style="color: #000000;"> MetadataSample<br/>　　</span><span style="color: #800080;">4</span><span style="color: #000000;"> {<br/>　　</span><span style="color: #800080;">5</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Program<br/>　　</span><span style="color: #800080;">6</span><span style="color: #000000;"> {<br/>　　</span><span style="color: #800080;">7</span> <span style="color: #008000;">//</span><span style="color: #008000;">声明一个委托类型</span><br/>　　<span style="color: #800080;">8</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">delegate</span> <span style="color: #0000ff;">void</span> PrintDelegate(<span style="color: #0000ff;">string</span><span style="color: #000000;"> content);<br/>　　</span><span style="color: #800080;">9</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> Main(<span style="color: #0000ff;">string</span><span style="color: #000000;">[] args)<br/>　　</span><span style="color: #800080;">10</span><span style="color: #000000;"> {<br/>　　</span><span style="color: #800080;">11</span> <span style="color: #0000ff;">int</span> threadId =<span style="color: #000000;"> Thread.CurrentThread.ManagedThreadId;<br/>　　</span><span style="color: #800080;">12</span> PrintDelegate printDelegate =<span style="color: #000000;"> Program.Print;<br/>　　</span><span style="color: #800080;">13</span> Console.WriteLine(<span style="color: #800000;">"</span><span style="color: #800000;">[主线程id:{0}]\t开始调用打印方法...</span><span style="color: #800000;">"</span><span style="color: #000000;">,threadId);<br/>　　</span><span style="color: #800080;">14</span> IAsyncResult result = printDelegate.BeginInvoke(<span style="color: #800000;">"</span><span style="color: #800000;">Hello world</span><span style="color: #800000;">"</span>,<span style="color: #0000ff;">null</span>,<span style="color: #0000ff;">null</span><span style="color: #000000;">);<br/>　　</span><span style="color: #800080;">15</span> <span style="color: #0000ff;">while</span> (!<span style="color: #000000;">result.IsCompleted)<br/>　　</span><span style="color: #800080;">16</span><span style="color: #000000;"> {<br/>　　</span><span style="color: #800080;">17</span> Console.WriteLine(<span style="color: #800000;">"</span><span style="color: #800000;"> . </span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/>　　</span><span style="color: #800080;">18</span> Thread.Sleep(<span style="color: #800080;">500</span><span style="color: #000000;">);<br/>　　</span><span style="color: #800080;">19</span><span style="color: #000000;"> }<br/>　　</span><span style="color: #800080;">20</span> Console.Write(<span style="color: #800000;">"</span><span style="color: #800000;">Press any key to continue . . . </span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/>　　</span><span style="color: #800080;">21</span> Console.ReadKey(<span style="color: #0000ff;">true</span><span style="color: #000000;">);<br/>　　</span><span style="color: #800080;">22</span><span style="color: #000000;"> }<br/>　　</span><span style="color: #800080;">23</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> Print(<span style="color: #0000ff;">string</span><span style="color: #000000;"> content)<br/>　　</span><span style="color: #800080;">24</span><span style="color: #000000;"> {<br/>　　</span><span style="color: #800080;">25</span> <span style="color: #0000ff;">int</span> threadId=<span style="color: #000000;">Thread.CurrentThread.ManagedThreadId;<br/>　　</span><span style="color: #800080;">26</span> Console.WriteLine(<span style="color: #800000;">"</span><span style="color: #800000;">[当前线程id:{0}]\t{1}</span><span style="color: #800000;">"</span><span style="color: #000000;">,threadId,content);<br/>　　</span><span style="color: #800080;">27</span> System.Threading.Thread.Sleep(<span style="color: #800080;">2000</span><span style="color: #000000;">);<br/>　　</span><span style="color: #800080;">28</span> Console.WriteLine(<span style="color: #800000;">"</span><span style="color: #800000;">[当前线程id:{0}]\t打印方法调用完毕.</span><span style="color: #800000;">"</span><span style="color: #000000;">,threadId);<br/>　　</span><span style="color: #800080;">29</span><span style="color: #000000;"> }<br/>　　</span><span style="color: #800080;">30</span><span style="color: #000000;"> }<br/>　　</span><span style="color: #800080;">31</span> }</div><p>&nbsp;</p><p>　　结果如下：</p><p><br />　　四、回调<br />　　之前三种方法者在等待异步方法执行完毕后才能拿到执行的结果，期间主线程均处于等待状态。回调和它们最大的区别是，在调用BeginInvoke时只要提供了回调方法，那么主线程就不必要再等待异步线程工作完毕，异步线程在工作结束后会主动调用我们提供的回调方法，并在回调方法中做相应的处理，例如显示异步调用的结果。<br />　　先看到之前那段调用BeginInvoke的代码：<br />　　IAsyncResult result = printDelegate.BeginInvoke("Hello world",null,null);<br />　　其中，第1个参数是委托签名中的参数，后面2个参数实际是我们在回调方法中要用到的，它们分别是：<br />　　AsyncCallback callback<br />　　object @object<br />　　前者就是回调方法，它要求回调方法的签名必须符合以下条件：<br />　　返回类型为void;<br />　　参数列表只有1个参数，且为IAsyncResult 类型。<br />　　如：void callbackMethod(IasyncResult asyncResult)<br />　　回调方法代码如下：<br />　　Ellic's Code<br />　　</p><div style="background-color: #F5F5F5;border: 1px solid #CCCCCC;padding:10px;"><span style="color: #800080;">1</span> <span style="color: #0000ff;">using</span><span style="color: #000000;"> System;<br/>　　</span><span style="color: #800080;">2</span> <span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Threading;<br/>　　</span><span style="color: #800080;">3</span> <span style="color: #0000ff;">namespace</span><span style="color: #000000;"> MetadataSample<br/>　　</span><span style="color: #800080;">4</span><span style="color: #000000;"> {<br/>　　</span><span style="color: #800080;">5</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Program<br/>　　</span><span style="color: #800080;">6</span><span style="color: #000000;"> {<br/>　　</span><span style="color: #800080;">7</span> <span style="color: #008000;">//</span><span style="color: #008000;">声明一个委托类型</span><br/>　　<span style="color: #800080;">8</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">delegate</span> <span style="color: #0000ff;">void</span> PrintDelegate(<span style="color: #0000ff;">string</span><span style="color: #000000;"> content);<br/>　　</span><span style="color: #800080;">9</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> Main(<span style="color: #0000ff;">string</span><span style="color: #000000;">[] args)<br/>　　</span><span style="color: #800080;">10</span><span style="color: #000000;"> {<br/>　　</span><span style="color: #800080;">11</span> <span style="color: #0000ff;">int</span> threadId =<span style="color: #000000;"> Thread.CurrentThread.ManagedThreadId;<br/>　　</span><span style="color: #800080;">12</span> PrintDelegate printDelegate =<span style="color: #000000;"> Program.Print;<br/>　　</span><span style="color: #800080;">13</span> Console.WriteLine(<span style="color: #800000;">"</span><span style="color: #800000;">[主线程id:{0}]\t开始调用打印方法...</span><span style="color: #800000;">"</span><span style="color: #000000;">,threadId);<br/>　　</span><span style="color: #800080;">14</span> IAsyncResult result = printDelegate.BeginInvoke(<span style="color: #800000;">"</span><span style="color: #800000;">Hello world</span><span style="color: #800000;">"</span><span style="color: #000000;">,PrintComplete,printDelegate);<br/>　　</span><span style="color: #800080;">15</span> Thread.Sleep(<span style="color: #800080;">10000</span><span style="color: #000000;">);<br/>　　</span><span style="color: #800080;">16</span><br/>　　<span style="color: #800080;">17</span> Console.Write(<span style="color: #800000;">"</span><span style="color: #800000;">Press any key to continue . . . </span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/>　　</span><span style="color: #800080;">18</span> Console.ReadKey(<span style="color: #0000ff;">true</span><span style="color: #000000;">);<br/>　　</span><span style="color: #800080;">19</span><span style="color: #000000;"> }<br/>　　</span><span style="color: #800080;">20</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> Print(<span style="color: #0000ff;">string</span><span style="color: #000000;"> content)<br/>　　</span><span style="color: #800080;">21</span><span style="color: #000000;"> {<br/>　　</span><span style="color: #800080;">22</span> <span style="color: #0000ff;">int</span> threadId=<span style="color: #000000;">Thread.CurrentThread.ManagedThreadId;<br/>　　</span><span style="color: #800080;">23</span> Console.WriteLine(<span style="color: #800000;">"</span><span style="color: #800000;">[当前线程id:{0}]\t{1}</span><span style="color: #800000;">"</span><span style="color: #000000;">,threadId,content);<br/>　　</span><span style="color: #800080;">24</span> System.Threading.Thread.Sleep(<span style="color: #800080;">1000</span><span style="color: #000000;">);<br/>　　</span><span style="color: #800080;">25</span><br/>　　<span style="color: #800080;">26</span><span style="color: #000000;"> }<br/>　　</span><span style="color: #800080;">27</span><br/>　　<span style="color: #800080;">28</span> <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> PrintComplete(IAsyncResult asyncResult)<br/>　　</span><span style="color: #800080;">29</span><span style="color: #000000;"> {<br/>　　</span><span style="color: #800080;">30</span> <span style="color: #0000ff;">if</span>(<span style="color: #0000ff;">null</span> ==<span style="color: #000000;"> asyncResult)<br/>　　</span><span style="color: #800080;">31</span><span style="color: #000000;"> {<br/>　　</span><span style="color: #800080;">32</span> <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> ArgumentNullException();<br/>　　</span><span style="color: #800080;">33</span><span style="color: #000000;"> }<br/>　　</span><span style="color: #800080;">34</span> <span style="color: #0000ff;">int</span> threadId =<span style="color: #000000;"> Thread.CurrentThread.ManagedThreadId;<br/>　　</span><span style="color: #800080;">35</span> (asyncResult.AsyncState <span style="color: #0000ff;">as</span><span style="color: #000000;"> PrintDelegate).EndInvoke(asyncResult);<br/>　　</span><span style="color: #800080;">36</span> Console.WriteLine(<span style="color: #800000;">"</span><span style="color: #800000;">[当前线程id:{0}]\t打印方法调用完毕.</span><span style="color: #800000;">"</span><span style="color: #000000;">,threadId);<br/>　　</span><span style="color: #800080;">37</span><span style="color: #000000;"> }<br/>　　</span><span style="color: #800080;">38</span><span style="color: #000000;"> }<br/>　　</span><span style="color: #800080;">39</span> }</div><p>&nbsp;</p><p>　　上面的四种方法就是自己在复习C#时学到的新知识，记录下来。</p><img src="http://counter.cnblogs.com/blog/rss/2671823" width="1" height="1" alt=""/><br/><p>本文链接：<a href="http://www.cnblogs.com/jxsoft/archive/2012/09/05/2671823.html" target="_blank">http://www.cnblogs.com/jxsoft/archive/2012/09/05/2671823.html</a>，转载请注明。</p>
</content>
</entry>
<entry>
<id>
http://www.cnblogs.com/jxsoft/archive/2012/08/30/2663310.html
</id>
<title type="text">用C#读取(数码相机)图片的EXIF信息 . - 许明吉博客</title>
<summary type="text">
对于数码相机所拍摄出的图片，Exif信息非常重要.参考网上的文章，结合我的实际需求，整理了一下，一共三个类文件EXIFextractor .cs,Translation.cs,EXIFMetaData,cs (Translation.cs,EXIFMetaData,cs 参看用C#读取图片的EXIF信息2) ///EXIFextractor .cs using System;using System.Text;using System.Collections;using System.Drawing.Imaging;using System.Reflection;using System.IO
</summary>
<published>2012-08-30T03:07:00Z</published>
<updated>2012-08-30T03:07:00Z</updated>
<author>
<name>许明吉博客</name>
<uri>http://www.cnblogs.com/jxsoft/</uri>
</author>
<link rel="alternate" href="http://www.cnblogs.com/jxsoft/archive/2012/08/30/2663310.html"/>
<link rel="alternate" type="text/html" href="http://www.cnblogs.com/jxsoft/archive/2012/08/30/2663310.html"/>
<content type="html">
<div style="background-color: #F5F5F5;border: 1px solid #CCCCCC;padding:10px;"><span style="color: #000000;">对于数码相机所拍摄出的图片，Exif信息非常重要.参考网上的文章，结合我的实际需求，整理了一下，一共三个类文件EXIFextractor .cs,Translation.cs,EXIFMetaData,cs (Translation.cs,EXIFMetaData,cs 参看用C#读取图片的EXIF信息2) <br/><br/></span><span style="color: #808080;">///</span><span style="color: #008000;">EXIFextractor .cs </span><br/><span style="color: #0000ff;">using</span><span style="color: #000000;"> System;<br/></span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Text;<br/></span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Collections;<br/></span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Drawing.Imaging;<br/></span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Reflection;<br/></span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.IO; <br/></span><span style="color: #0000ff;">namespace</span><span style="color: #000000;"> EXIF<br/>{<br/></span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><br/><span style="color: #808080;">///</span><span style="color: #008000;"> EXIFextractor Class<br/></span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> EXIFextractor : IEnumerable<br/>{<br/></span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><br/><span style="color: #808080;">///</span><span style="color: #008000;"> Get the individual property value by supplying property name <br/></span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">object</span> <span style="color: #0000ff;">this</span>[<span style="color: #0000ff;">string</span><span style="color: #000000;"> index]<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">return</span><span style="color: #000000;"> propertiesHash[index];<br/>}<br/>} <br/></span><span style="color: #0000ff;">private</span><span style="color: #000000;"> System.Drawing.Bitmap bmp; <br/></span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">string</span> data; <span style="color: #008000;">//</span><span style="color: #008000;">全てのEXIF名と値(項目間に/nで隔てる) </span><br/><span style="color: #0000ff;">private</span> Translation myHash; <span style="color: #008000;">//</span><span style="color: #008000;"> EXIFタグと名のHashTable </span><br/><span style="color: #0000ff;">private</span> Hashtable propertiesHash;<span style="color: #008000;">//</span><span style="color: #008000;"> EXIFタグと値のHashTable</span><br/><span style="color: #0000ff;">internal</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> Count<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span><span style="color: #000000;">.propertiesHash.Count;<br/>}<br/>}<br/></span><span style="color: #008000;">//<br/></span><span style="color: #0000ff;">string</span><span style="color: #000000;"> separateString;<br/></span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><br/><span style="color: #808080;">///</span> <br/><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setTag(<span style="color: #0000ff;">int</span> id, <span style="color: #0000ff;">string</span><span style="color: #000000;"> data)<br/>{<br/>Encoding ascii </span>=<span style="color: #000000;"> Encoding.ASCII;<br/></span><span style="color: #0000ff;">this</span>.setTag(id, data.Length, <span style="color: #800080;">0x2</span><span style="color: #000000;">, ascii.GetBytes(data));<br/>}<br/></span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><br/><span style="color: #808080;">///</span><span style="color: #008000;"> setTag<br/></span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setTag(<span style="color: #0000ff;">int</span> id, <span style="color: #0000ff;">int</span> len, <span style="color: #0000ff;">short</span> type, <span style="color: #0000ff;">byte</span><span style="color: #000000;">[] data)<br/>{<br/>PropertyItem item </span>=<span style="color: #000000;"> CreatePropertyItem(type, id, len, data);<br/></span><span style="color: #0000ff;">this</span><span style="color: #000000;">.bmp.SetPropertyItem(item);<br/>buildDB(</span><span style="color: #0000ff;">this</span><span style="color: #000000;">.bmp.PropertyItems);<br/>}<br/></span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><br/><span style="color: #808080;">///</span> <br/><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><br/><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> PropertyItem CreatePropertyItem(<span style="color: #0000ff;">short</span> type, <span style="color: #0000ff;">int</span> tag, <span style="color: #0000ff;">int</span> len, <span style="color: #0000ff;">byte</span><span style="color: #000000;">[] value)<br/>{<br/>PropertyItem item; <br/><br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> Loads a PropertyItem from a Jpeg image stored in the assembly as a resource.</span><br/>Assembly assembly =<span style="color: #000000;"> Assembly.GetExecutingAssembly();<br/>Stream emptyBitmapStream </span>= assembly.GetManifestResourceStream(<span style="color: #800000;">"</span><span style="color: #800000;">EXIFextractor.decoy.jpg</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/>System.Drawing.Image empty </span>=<span style="color: #000000;"> System.Drawing.Image.FromStream(emptyBitmapStream); <br/><br/>item </span>= empty.PropertyItems[<span style="color: #800080;">0</span><span style="color: #000000;">]; <br/><br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> Copies the data to the property item.</span><br/>item.Type =<span style="color: #000000;"> type;<br/>item.Len </span>=<span style="color: #000000;"> len;<br/>item.Id </span>=<span style="color: #000000;"> tag;<br/>item.Value </span>= <span style="color: #0000ff;">new</span> <span style="color: #0000ff;">byte</span><span style="color: #000000;">[value.Length];<br/>value.CopyTo(item.Value, </span><span style="color: #800080;">0</span><span style="color: #000000;">); <br/><br/></span><span style="color: #0000ff;">return</span><span style="color: #000000;"> item;<br/>}<br/></span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><br/><span style="color: #808080;">///</span> <br/><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><br/><span style="color: #0000ff;">public</span> EXIFextractor(<span style="color: #0000ff;">ref</span> System.Drawing.Bitmap bmp, <span style="color: #0000ff;">string</span><span style="color: #000000;"> separate)<br/>{<br/>propertiesHash </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> Hashtable();<br/></span><span style="color: #0000ff;">this</span>.bmp =<span style="color: #000000;"> bmp;<br/></span><span style="color: #0000ff;">this</span>.separateString =<span style="color: #000000;"> separate; <br/>myHash </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> Translation();<br/>buildDB(</span><span style="color: #0000ff;">this</span><span style="color: #000000;">.bmp.PropertyItems);<br/>}<br/></span><span style="color: #0000ff;">string</span> msp = <span style="color: #800000;">""</span><span style="color: #000000;">; <br/><br/></span><span style="color: #0000ff;">public</span> EXIFextractor(<span style="color: #0000ff;">ref</span> System.Drawing.Bitmap bmp, <span style="color: #0000ff;">string</span> separate, <span style="color: #0000ff;">string</span><span style="color: #000000;"> msp)<br/>{<br/>propertiesHash </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> Hashtable();<br/></span><span style="color: #0000ff;">this</span>.separateString =<span style="color: #000000;"> separate;<br/></span><span style="color: #0000ff;">this</span>.msp =<span style="color: #000000;"> msp;<br/></span><span style="color: #0000ff;">this</span>.bmp =<span style="color: #000000;"> bmp; <br/>myHash </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> Translation();<br/></span><span style="color: #0000ff;">this</span><span style="color: #000000;">.buildDB(bmp.PropertyItems);<br/>}<br/></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> PropertyItem[] GetExifProperties(<span style="color: #0000ff;">string</span><span style="color: #000000;"> fileName)<br/>{<br/>FileStream stream </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> FileStream(fileName, FileMode.Open, FileAccess.Read);<br/>System.Drawing.Image image </span>=<span style="color: #000000;"> System.Drawing.Image.FromStream(stream,<br/></span><span style="color: #008000;">/*</span><span style="color: #008000;"> useEmbeddedColorManagement = </span><span style="color: #008000;">*/</span> <span style="color: #0000ff;">true</span><span style="color: #000000;">,<br/></span><span style="color: #008000;">/*</span><span style="color: #008000;"> validateImageData = </span><span style="color: #008000;">*/</span> <span style="color: #0000ff;">false</span><span style="color: #000000;">);<br/></span><span style="color: #0000ff;">return</span><span style="color: #000000;"> image.PropertyItems;<br/>}<br/></span><span style="color: #0000ff;">public</span> EXIFextractor(<span style="color: #0000ff;">string</span> file, <span style="color: #0000ff;">string</span> separate, <span style="color: #0000ff;">string</span><span style="color: #000000;"> msp)<br/>{<br/>propertiesHash </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> Hashtable();<br/></span><span style="color: #0000ff;">this</span>.separateString =<span style="color: #000000;"> separate;<br/></span><span style="color: #0000ff;">this</span>.msp =<span style="color: #000000;"> msp; <br/>myHash </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> Translation()<br/></span><span style="color: #0000ff;">this</span><span style="color: #000000;">.buildDB(GetExifProperties(file));<br/>} <br/></span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><br/><span style="color: #808080;">///</span><span style="color: #008000;"> データタイプによって、値を取得する。<br/></span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><br/><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> buildDB(System.Drawing.Imaging.PropertyItem[] parr)<br/>{<br/>propertiesHash.Clear();<br/></span><span style="color: #008000;">//</span><span style="color: #008000;">全てのEXIF名と値(項目間に/nで隔てる)</span><br/>data = <span style="color: #800000;">""</span><span style="color: #000000;">; <br/><br/></span><span style="color: #008000;">//</span><span style="color: #008000;">ASCII　Encoding</span><br/>Encoding ascii =<span style="color: #000000;"> Encoding.ASCII;<br/></span><span style="color: #008000;">//</span><span style="color: #008000;">メタデータプロパティ</span><br/><span style="color: #0000ff;">foreach</span> (System.Drawing.Imaging.PropertyItem item <span style="color: #0000ff;">in</span><span style="color: #000000;"> parr)<br/>{<br/></span><span style="color: #0000ff;">string</span> itemValue = <span style="color: #800000;">""</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">string</span> itemName = (<span style="color: #0000ff;">string</span><span style="color: #000000;">)myHash[item.Id];<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> tag not found. skip it</span><br/><span style="color: #0000ff;">if</span> (itemName == <span style="color: #0000ff;">null</span>) <span style="color: #0000ff;">continue</span><span style="color: #000000;">;<br/>data </span>+= itemName + <span style="color: #800000;">"</span><span style="color: #800000;">: </span><span style="color: #800000;">"</span><span style="color: #000000;">;<br/></span><span style="color: #008000;">//</span><span style="color: #008000;">1 = BYTE An 8-bit unsigned integer.,</span><br/><span style="color: #0000ff;">if</span> (item.Type == <span style="color: #800080;">0x1</span><span style="color: #000000;">)<br/>{<br/>itemValue </span>= item.Value[<span style="color: #800080;">0</span><span style="color: #000000;">].ToString();<br/>}<br/></span><span style="color: #008000;">//</span><span style="color: #008000;">2 = ASCII An 8-bit byte containing one 7-bit ASCII code. The final byte is terminated with NULL.,</span><br/><span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> (item.Type == <span style="color: #800080;">0x2</span>)<span style="color: #008000;">//</span><span style="color: #008000;"> string </span><br/><span style="color: #000000;">{ <br/><br/>itemValue </span>= ascii.GetString(item.Value).Trim(<span style="color: #800000;">'</span><span style="color: #800000;">/0</span><span style="color: #800000;">'</span><span style="color: #000000;">);<br/>}<br/></span><span style="color: #008000;">//</span><span style="color: #008000;">3 = SHORT A 16-bit (2 -byte) unsigned integer,</span><br/><span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> (item.Type == <span style="color: #800080;">0x3</span><span style="color: #000000;">)<br/>{ </span><span style="color: #008000;">//</span><span style="color: #008000;"> lookup table </span><br/><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (item.Id)<br/>{<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0x0112</span>: <span style="color: #008000;">//</span><span style="color: #008000;"> Orientation 画像の方向 </span><br/><span style="color: #000000;">{<br/></span><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (convertToInt16U(item.Value))<br/>{<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">1</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">水平(普通)</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">1 = Horizontal (normal) </span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">2</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">水平鏡像</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">2 = Mirror horizontal </span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">3</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">回転180</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">3 = Rotate 180 </span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">4</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">垂直鏡像</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">4 = Mirror vertical </span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">5</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">水平鏡像回転270</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>;<span style="color: #008000;">//</span><span style="color: #008000;">5 = Mirror horizontal and rotate 270 CW </span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">6</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">回転90</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">6 = Rotate 90 CW </span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">7</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">水平鏡像回転90</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>;<span style="color: #008000;">//</span><span style="color: #008000;">7 = Mirror horizontal and rotate 90 CW </span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">8</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">回転270</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>;<span style="color: #008000;">//</span><span style="color: #008000;">8 = Rotate 270 CW</span><br/><span style="color: #0000ff;">default</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">未定義</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">; <br/>}<br/>}<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">; <br/><br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0x8827</span>: <span style="color: #008000;">//</span><span style="color: #008000;"> ISO</span><br/>itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">ISO-</span><span style="color: #800000;">"</span> +<span style="color: #000000;"> convertToInt16U(item.Value).ToString();<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0xA217</span>: <span style="color: #008000;">//</span><span style="color: #008000;"> センサー方式: SensingMethod </span><br/><span style="color: #000000;">{<br/></span><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (convertToInt16U(item.Value))<br/>{<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">1</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">未定義</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">Not defined</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">2</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">単版カラーセンサー</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">One-chip color area sensor</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">3</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">2板カラーセンサー</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">Two-chip color area sensor</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">4</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">3板カラーセンサー</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">Three-chip color area sensor</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">5</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">色順次カラーセンサー</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">Color sequential area sensor</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">7</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">3線リニアセンサー</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">Trilinear sensor</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">8</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">色順次リニアセンサー</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">Color sequential linear sensor</span><br/><span style="color: #0000ff;">default</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">保留されます</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">reserved</span><br/><span style="color: #000000;">} <br/>}<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0xA001</span>:<span style="color: #008000;">//</span><span style="color: #008000;">ColorSpace</span><br/><span style="color: #000000;">{<br/></span><span style="color: #0000ff;">if</span> (convertToInt16U(item.Value) == <span style="color: #800080;">1</span><span style="color: #000000;">)<br/>{<br/>itemValue </span>= <span style="color: #800000;">"</span><span style="color: #800000;">sRGB</span><span style="color: #800000;">"</span><span style="color: #000000;">;<br/>}<br/></span><span style="color: #0000ff;">else</span><span style="color: #000000;"><br/>{<br/>itemValue </span>= <span style="color: #800000;">"</span><span style="color: #800000;">未調整</span><span style="color: #800000;">"</span>;<span style="color: #008000;">//</span><span style="color: #008000;">Uncalibrated</span><br/><span style="color: #000000;">}<br/><br/>}<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0x8822</span>: <span style="color: #008000;">//</span><span style="color: #008000;"> 露出プログラム: ExposureProgram </span><br/><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (convertToInt16U(item.Value))<br/>{<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">未定義</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;"> Not defined </span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">1</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">手動</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;"> Manual </span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">2</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">ノーマルプログラム</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;"> Normal program </span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">3</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">露出優先</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>;<span style="color: #008000;">//</span><span style="color: #008000;"> Aperture priority</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">4</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">シャッター優先</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;"> Shutter priority</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">5</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">creativeプログラム（被写界深度方向にバイアス）</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;"> Creative program (biased toward depth of field)</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">6</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">actionプログラム（シャッタースピード高速側にバイアス）</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>;<span style="color: #008000;">//</span><span style="color: #008000;"> Action program (biased toward fast shutter speed)</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">7</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">ポートレイトモード（クローズアップ撮影、背景はフォーカス外す）</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;"> Portrait mode (for closeup photos with the background out of focus)</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">8</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">ランドスケープモード（landscape 撮影、背景はフォーカス合う）</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;"> Landscape mode (for landscape photos with the background in focus)</span><br/><span style="color: #0000ff;">default</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">保留されます</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;"> reserved</span><br/><span style="color: #000000;">}<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0x9207</span>: <span style="color: #008000;">//</span><span style="color: #008000;"> 測光方式: MeteringMode </span><br/><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (convertToInt16U(item.Value))<br/>{<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">不明</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;"> unknown </span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">1</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">平均</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">Average </span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">2</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">中央重点</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;"> CenterWeightedAverage </span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">3</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">スポット</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;"> Spot</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">4</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">マルチスポット</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;"> MultiSpot</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">5</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">分割測光</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;"> Pattern</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">6</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">部分測光</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;"> Partial</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">255</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">その他</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;"> Other</span><br/><span style="color: #0000ff;">default</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">保留されます</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;"> reserved</span><br/><span style="color: #000000;">}<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0x9208</span>: <span style="color: #008000;">//</span><span style="color: #008000;"> 光源: LightSource </span><br/><span style="color: #000000;">{<br/></span><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (convertToInt16U(item.Value))<br/>{<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">不明</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">unknown</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">1</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">昼光</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">Daylight</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">2</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">蛍光灯</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">Fluorescent</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">3</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">タングステン</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">Tungsten</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">4</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">フラッシュ*2.2</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">flash*2.2</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">9</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">晴れ*2.2</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">10</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">曇り*2.2</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">11</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">日陰*2.2</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">12</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">Daylight 蛍光灯(D 5700-7100K)*2.2</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">13</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">Day white 蛍光灯(N 4600-5400K)*2.2</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">14</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">Cool white 蛍光灯(W 3900-4500K)*2.2</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">15</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">White 蛍光灯(WW 3200-3700K)*2.2</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">17</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">標準光A</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">Standard light A</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">18</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">標準光 B</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">Standard light B</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">19</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">標準光 C</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">Standard light C</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">20</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">D55</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">21</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">D65</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">22</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">D75</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">23</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">D50*2.2</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">24</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">ISOスタジオ?タングステン*2.2</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">255</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">その他</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">other</span><br/><span style="color: #0000ff;">default</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">保留されます</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">reserved</span><br/><span style="color: #000000;">}<br/>}<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0x9209</span>:<span style="color: #008000;">//</span><span style="color: #008000;">フラッシュ: Flash </span><br/><span style="color: #000000;">{<br/></span><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (convertToInt16U(item.Value))<br/>{<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">フラッシュなし</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">No Flash </span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">1</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">フラッシュ発光</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">Flash fired</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">5</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">発光したが反射光は検出できなかった</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">Fired, Return not detected </span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">7</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">発光したが反射光は検出できなかった</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">Fired, Return detected </span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">8</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">オン、非発光</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">On, Did not fire</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">9</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">オン</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;"> On</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">24</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">自動、非発光</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>;<span style="color: #008000;">//</span><span style="color: #008000;"> Auto, Did not fire </span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">25</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">自動、発光</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>;<span style="color: #008000;">//</span><span style="color: #008000;"> Auto, Fired</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">32</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">フラッシュ機能なし</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>;<span style="color: #008000;">//</span><span style="color: #008000;"> No flash function </span><br/><span style="color: #0000ff;">default</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">未定義</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">reserved</span><br/><span style="color: #000000;">}<br/>}<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #008000;">//</span><span style="color: #008000;">Exif Version 2.2で新たに規定された項目。</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">0xA401</span>:<span style="color: #008000;">//</span><span style="color: #008000;">　スペシャル?エフェクト: CustomRendered </span><br/><span style="color: #000000;">{<br/></span><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (convertToInt16U(item.Value))<br/>{<br/></span><span style="color: #008000;">//</span><span style="color: #008000;">スペシャル?エフェクト利用の有無。</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">0</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">ノーマル処理</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">1</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">エフェクトあり</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">default</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">未定義</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">reserved</span><br/><span style="color: #000000;">}<br/>}<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0xA402</span>:<span style="color: #008000;">//</span><span style="color: #008000;">　露光モード: ExposureMode </span><br/><span style="color: #000000;">{<br/></span><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (convertToInt16U(item.Value))<br/>{<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">自動露光</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">1</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">手動露光</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">; <br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">2</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">自動ブラケット</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">default</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">未定義</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">reserved</span><br/><span style="color: #000000;">}<br/>}<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0xA403</span>:<span style="color: #008000;">//</span><span style="color: #008000;">ホワイト?バランス: WhiteBalance </span><br/><span style="color: #000000;">{<br/></span><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (convertToInt16U(item.Value))<br/>{<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">自動ホワイト?バランス</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">1</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">手動ホワイト?バランス</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">default</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">未定義</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">reserved</span><br/><span style="color: #000000;">}<br/>}<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0xA406</span>:<span style="color: #008000;">//</span><span style="color: #008000;">撮影シーン?タイプ: SceneCaptureType </span><br/><span style="color: #000000;">{<br/></span><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (convertToInt16U(item.Value))<br/>{<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">スタンダード</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">1</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">ランドスケープ</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">2</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">ポートレイト</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">3</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">夜景</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">default</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">未定義</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">reserved</span><br/><span style="color: #000000;">}<br/>}<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">; <br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0xA408</span>:<span style="color: #008000;">//</span><span style="color: #008000;">コントラスト: Contrast </span><br/><span style="color: #000000;">{<br/></span><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (convertToInt16U(item.Value))<br/>{<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">ノーマル</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">1</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">ソフト</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">2</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">ハード</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">default</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">未定義</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">reserved</span><br/><span style="color: #000000;">}<br/>}<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0xA409</span>:<span style="color: #008000;">//</span><span style="color: #008000;">飽和状態: Saturation </span><br/><span style="color: #000000;">{<br/></span><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (convertToInt16U(item.Value))<br/>{<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">ノーマル</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">1</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">低飽和</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">2</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">高飽和</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">default</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">未定義</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">reserved</span><br/><span style="color: #000000;">}<br/>}<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0xA40A</span>:<span style="color: #008000;">//</span><span style="color: #008000;">シャープネス: Sharpness </span><br/><span style="color: #000000;">{<br/></span><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (convertToInt16U(item.Value))<br/>{<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">ノーマル</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">1</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">ソフト</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">2</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">ハード</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">3</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">夜景</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">4</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">夜景</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">default</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">未定義</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">reserved</span><br/><span style="color: #000000;">}<br/>}<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0xA40C</span>:<span style="color: #008000;">//</span><span style="color: #008000;">被写体撮影モード: SubjectDistanceRange </span><br/><span style="color: #000000;">{<br/></span><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (convertToInt16U(item.Value))<br/>{<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">不明</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">1</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">マクロ</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">2</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">近景</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">3</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">遠景</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">4</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">夜景</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">default</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">未定義</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">reserved</span><br/><span style="color: #000000;">}<br/>}<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">default</span><span style="color: #000000;">:<br/>itemValue </span>=<span style="color: #000000;"> convertToInt16U(item.Value).ToString();<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/>}<br/>}<br/></span><span style="color: #008000;">//</span><span style="color: #008000;">4 = LONG A 32-bit (4 -byte) unsigned integer,</span><br/><span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> (item.Type == <span style="color: #800080;">0x4</span><span style="color: #000000;">)<br/>{ <br/>itemValue </span>=<span style="color: #000000;"> convertToInt32U(item.Value).ToString();<br/>}<br/></span><span style="color: #008000;">//</span><span style="color: #008000;">5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the</span><span style="color: #008000;">//</span><span style="color: #008000;">denominator.,</span><br/><span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> (item.Type == <span style="color: #800080;">0x5</span><span style="color: #000000;">)<br/>{<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> rational</span><br/><span style="color: #0000ff;">byte</span>[] n = <span style="color: #0000ff;">new</span> <span style="color: #0000ff;">byte</span>[item.Len / <span style="color: #800080;">2</span><span style="color: #000000;">];<br/></span><span style="color: #0000ff;">byte</span>[] d = <span style="color: #0000ff;">new</span> <span style="color: #0000ff;">byte</span>[item.Len / <span style="color: #800080;">2</span><span style="color: #000000;">];<br/>Array.Copy(item.Value, </span><span style="color: #800080;">0</span>, n, <span style="color: #800080;">0</span>, item.Len / <span style="color: #800080;">2</span><span style="color: #000000;">);<br/>Array.Copy(item.Value, item.Len </span>/ <span style="color: #800080;">2</span>, d, <span style="color: #800080;">0</span>, item.Len / <span style="color: #800080;">2</span><span style="color: #000000;">);<br/></span><span style="color: #0000ff;">uint</span> a =<span style="color: #000000;"> convertToInt32U(n);<br/></span><span style="color: #0000ff;">uint</span> b =<span style="color: #000000;"> convertToInt32U(d);<br/>Rational r </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> Rational(a, b); <br/></span><span style="color: #008000;">//</span><span style="color: #008000;">convert here </span><br/><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (item.Id)<br/>{<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0x9202</span>: <span style="color: #008000;">//</span><span style="color: #008000;"> 絞り（APEX） aperture</span><br/>itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">F</span><span style="color: #800000;">"</span> + Math.Round(Math.Pow(Math.Sqrt(<span style="color: #800080;">2</span>), r.ToDouble()), <span style="color: #800080;">2</span><span style="color: #000000;">).ToString();<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0x920A</span>:<span style="color: #008000;">//</span><span style="color: #008000;">レンズ焦点距離: FocalLength </span><br/>itemValue = r.ToDouble().ToString()+<span style="color: #800000;">"</span><span style="color: #800000;"> mm</span><span style="color: #800000;">"</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0x829A</span>:<span style="color: #008000;">//</span><span style="color: #008000;">露出時間: ExposureTime </span><br/>itemValue = r.ToString(<span style="color: #800000;">"</span><span style="color: #800000;">/</span><span style="color: #800000;">"</span>) + <span style="color: #800000;">"</span><span style="color: #800000;"> 秒</span><span style="color: #800000;">"</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0x829D</span>: <span style="color: #008000;">//</span><span style="color: #008000;"> F-number</span><br/>itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">F/</span><span style="color: #800000;">"</span> +<span style="color: #000000;"> r.ToDouble().ToString();<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #008000;">//</span><span style="color: #008000;">Exif Version 2.2で新たに規定された項目。</span><br/><span style="color: #0000ff;">case</span> <span style="color: #800080;">0xA407</span>:<span style="color: #008000;">//</span><span style="color: #008000;">ゲイン?コントロール: GainControl </span><br/><span style="color: #000000;">{<br/></span><span style="color: #0000ff;">switch</span> ((<span style="color: #0000ff;">int</span><span style="color: #000000;">)r.ToDouble())<br/>{<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">コントロールなし</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">1</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">低ゲイン?アップ</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">2</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">高ゲイン?アップ</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">3</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">低ゲイン?ダウン</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">4</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">高ゲイン?ダウン</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">default</span>: itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">未定義</span><span style="color: #800000;">"</span>; <span style="color: #0000ff;">break</span>; <span style="color: #008000;">//</span><span style="color: #008000;">reserved</span><br/><span style="color: #000000;">}<br/>}<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">default</span><span style="color: #000000;">:<br/>itemValue </span>= r.ToString(<span style="color: #800000;">"</span><span style="color: #800000;">/</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/>} <br/><br/>}<br/></span><span style="color: #008000;">//</span><span style="color: #008000;">7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition,</span><br/><span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> (item.Type == <span style="color: #800080;">0x7</span><span style="color: #000000;">)<br/>{<br/></span><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (item.Id)<br/>{<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0xA300</span>:<span style="color: #008000;">//</span><span style="color: #008000;">ファイルソース: FileSource </span><br/><span style="color: #000000;">{<br/></span><span style="color: #0000ff;">if</span> (item.Value[<span style="color: #800080;">0</span>] == <span style="color: #800080;">3</span><span style="color: #000000;">)<br/>{<br/>itemValue </span>= <span style="color: #800000;">"</span><span style="color: #800000;">デジタルカメラ</span><span style="color: #800000;">"</span><span style="color: #000000;">;<br/>}<br/></span><span style="color: #0000ff;">else</span><span style="color: #000000;"><br/>{<br/>itemValue </span>= <span style="color: #800000;">"</span><span style="color: #800000;">保留されます</span><span style="color: #800000;">"</span><span style="color: #000000;">;<br/>}<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/>}<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0xA301</span>:<span style="color: #008000;">//</span><span style="color: #008000;">シーンタイプ: SceneType </span><br/><span style="color: #0000ff;">if</span> (item.Value[<span style="color: #800080;">0</span>] == <span style="color: #800080;">1</span><span style="color: #000000;">)<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> a directly photographed image</span><br/>itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">直接撮影された画像</span><span style="color: #800000;">"</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">else</span><br/><span style="color: #008000;">//</span><span style="color: #008000;">Not a directly photographed image</span><br/>itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">直接撮影された画像ではない</span><span style="color: #800000;">"</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0x9101</span>:<span style="color: #008000;">//</span><span style="color: #008000;">各コンポーネントの意味: ComponentsConfiguration <br/></span><span style="color: #008000;">//</span><span style="color: #008000;">　0x04050600　:　RGB / 0x01020300　:　YCbCr </span><br/><span style="color: #0000ff;">string</span> temp = BitConverter.ToString(item.Value).Substring(<span style="color: #800080;">0</span>,<span style="color: #800080;">11</span><span style="color: #000000;">);<br/></span><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (temp)<br/>{<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800000;">"</span><span style="color: #800000;">01-02-03-00</span><span style="color: #800000;">"</span><span style="color: #000000;">:<br/>itemValue </span>= <span style="color: #800000;">"</span><span style="color: #800000;">RGB</span><span style="color: #800000;">"</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800000;">"</span><span style="color: #800000;">04-05-06-00</span><span style="color: #800000;">"</span><span style="color: #000000;">:<br/>itemValue </span>= <span style="color: #800000;">"</span><span style="color: #800000;">YCbCr</span><span style="color: #800000;">"</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">default</span><span style="color: #000000;">:<br/>itemValue </span>= <span style="color: #800000;">"</span><span style="color: #800000;">未定義</span><span style="color: #800000;">"</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/>}<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0x9286</span>:<span style="color: #008000;">//</span><span style="color: #008000;">ユーザーコメント <br/></span><span style="color: #008000;">//</span><span style="color: #008000;">　ただし始めの8バイトは文字コードを示す。</span><br/><span style="color: #0000ff;">string</span> usercomment= BitConverter.ToString(item.Value).Substring(<span style="color: #800080;">0</span>,<span style="color: #800080;">23</span><span style="color: #000000;">);<br/></span><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (usercomment)<br/>{<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800000;">"</span><span style="color: #800000;">41-53-43-49-49-00-00-00</span><span style="color: #800000;">"</span><span style="color: #000000;">:<br/>itemValue </span>= <span style="color: #800000;">"</span><span style="color: #800000;">ASCII</span><span style="color: #800000;">"</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800000;">"</span><span style="color: #800000;">4A-49-53-00-00-00-00-00</span><span style="color: #800000;">"</span><span style="color: #000000;">:<br/>itemValue </span>= <span style="color: #800000;">"</span><span style="color: #800000;">JIS</span><span style="color: #800000;">"</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800000;">"</span><span style="color: #800000;">55-4E-49-43-4F-44-45-00</span><span style="color: #800000;">"</span><span style="color: #000000;">:<br/>itemValue </span>= <span style="color: #800000;">"</span><span style="color: #800000;">Unicode</span><span style="color: #800000;">"</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">default</span><span style="color: #000000;">:<br/>itemValue </span>= <span style="color: #800000;">"</span><span style="color: #800000;">未定義</span><span style="color: #800000;">"</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/>}<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">default</span><span style="color: #000000;">:<br/>itemValue </span>= <span style="color: #800000;">"</span><span style="color: #800000;">-</span><span style="color: #800000;">"</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/>}<br/>} <br/></span><span style="color: #008000;">//</span><span style="color: #008000;">9 = SLONG A 32-bit (4 -byte) signed integer (2's complement notation),</span><br/><span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> (item.Type == <span style="color: #800080;">0x9</span><span style="color: #000000;">)<br/>{<br/>itemValue </span>=<span style="color: #000000;"> convertToInt32(item.Value).ToString();<br/>}<br/></span><span style="color: #008000;">//</span><span style="color: #008000;">10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the<br/></span><span style="color: #008000;">//</span><span style="color: #008000;">denominator.</span><br/><span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> (item.Type == <span style="color: #800080;">0xA</span><span style="color: #000000;">)<br/>{<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> unsigned rational</span><br/><span style="color: #0000ff;">byte</span>[] n = <span style="color: #0000ff;">new</span> <span style="color: #0000ff;">byte</span>[item.Len / <span style="color: #800080;">2</span><span style="color: #000000;">];<br/></span><span style="color: #0000ff;">byte</span>[] d = <span style="color: #0000ff;">new</span> <span style="color: #0000ff;">byte</span>[item.Len / <span style="color: #800080;">2</span><span style="color: #000000;">];<br/>Array.Copy(item.Value, </span><span style="color: #800080;">0</span>, n, <span style="color: #800080;">0</span>, item.Len / <span style="color: #800080;">2</span><span style="color: #000000;">);<br/>Array.Copy(item.Value, item.Len </span>/ <span style="color: #800080;">2</span>, d, <span style="color: #800080;">0</span>, item.Len / <span style="color: #800080;">2</span><span style="color: #000000;">);<br/></span><span style="color: #0000ff;">int</span> a =<span style="color: #000000;"> convertToInt32(n);<br/></span><span style="color: #0000ff;">int</span> b =<span style="color: #000000;"> convertToInt32(d);<br/>Rational r </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> Rational(a, b); <br/><br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> convert here</span><br/><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (item.Id)<br/>{<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0x9201</span>: <span style="color: #008000;">//</span><span style="color: #008000;"> シャッタースピード: ShutterSpeedValue </span><br/>itemValue = <span style="color: #800000;">"</span><span style="color: #800000;">1/</span><span style="color: #800000;">"</span> + Math.Round(Math.Pow(<span style="color: #800080;">2</span>, r.ToDouble()), <span style="color: #800080;">2</span>).ToString()+<span style="color: #800000;">"</span><span style="color: #800000;">sec</span><span style="color: #800000;">"</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0x9203</span>:<span style="color: #008000;">//</span><span style="color: #008000;">輝度値: BrightnessValue </span><br/>itemValue = Math.Round(r.ToDouble(), <span style="color: #800080;">4</span><span style="color: #000000;">).ToString();<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">default</span><span style="color: #000000;">:<br/>itemValue </span>= r.ToString(<span style="color: #800000;">"</span><span style="color: #800000;">/</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/></span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/>}<br/>}<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> リストに追加する。</span><br/><span style="color: #0000ff;">if</span> (propertiesHash[itemName] == <span style="color: #0000ff;">null</span><span style="color: #000000;">)<br/>propertiesHash.Add(itemName, itemValue);<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> cat it too</span><br/>data +=<span style="color: #000000;"> itemValue;<br/>data </span>+= <span style="color: #0000ff;">this</span><span style="color: #000000;">.separateString;<br/>}<br/>}<br/></span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><br/><span style="color: #808080;">///</span><span style="color: #008000;"> 全ての項目と項目の値(項目間に/nで隔てる)を取得する。<br/></span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><br/><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;returns&gt;&lt;/returns&gt;</span><br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> ToString()<br/>{<br/></span><span style="color: #0000ff;">return</span><span style="color: #000000;"> data;<br/>} <br/></span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><br/><span style="color: #808080;">///</span><span style="color: #008000;">　16-bit (2 -byte) signed short<br/></span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><br/><span style="color: #0000ff;">int</span> convertToInt16(<span style="color: #0000ff;">byte</span><span style="color: #000000;">[] arr)<br/>{<br/></span><span style="color: #0000ff;">if</span> (arr.Length != <span style="color: #800080;">2</span><span style="color: #000000;">)<br/></span><span style="color: #0000ff;">return</span> <span style="color: #800080;">0</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">else</span><br/><span style="color: #0000ff;">return</span> arr[<span style="color: #800080;">1</span>] &lt;&lt; <span style="color: #800080;">8</span> | arr[<span style="color: #800080;">0</span><span style="color: #000000;">];<br/>}<br/></span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><br/><span style="color: #808080;">///</span><span style="color: #008000;"> SHORT：16-bit (2 -byte) unsigned integer<br/></span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><br/><span style="color: #0000ff;">uint</span> convertToInt16U(<span style="color: #0000ff;">byte</span><span style="color: #000000;">[] arr)<br/>{<br/></span><span style="color: #0000ff;">if</span> (arr.Length != <span style="color: #800080;">2</span><span style="color: #000000;">)<br/></span><span style="color: #0000ff;">return</span> <span style="color: #800080;">0</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">else</span><br/><span style="color: #0000ff;">return</span> Convert.ToUInt16(arr[<span style="color: #800080;">1</span>] &lt;&lt; <span style="color: #800080;">8</span> | arr[<span style="color: #800080;">0</span><span style="color: #000000;">]);<br/>} <br/><br/></span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><br/><span style="color: #808080;">///</span><span style="color: #008000;"> SLONG: 32-bit (4 -byte) signed integer (2's complement notation)<br/></span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><br/><span style="color: #0000ff;">int</span> convertToInt32(<span style="color: #0000ff;">byte</span><span style="color: #000000;">[] arr)<br/>{<br/></span><span style="color: #0000ff;">if</span> (arr.Length != <span style="color: #800080;">4</span><span style="color: #000000;">)<br/></span><span style="color: #0000ff;">return</span> <span style="color: #800080;">0</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">else</span><br/><span style="color: #0000ff;">return</span> arr[<span style="color: #800080;">3</span>] &lt;&lt; <span style="color: #800080;">24</span> | arr[<span style="color: #800080;">2</span>] &lt;&lt; <span style="color: #800080;">16</span> | arr[<span style="color: #800080;">1</span>] &lt;&lt; <span style="color: #800080;">8</span> | arr[<span style="color: #800080;">0</span><span style="color: #000000;">];<br/>}<br/></span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><br/><span style="color: #808080;">///</span><span style="color: #008000;"> LONG: 32-bit (4 -byte) unsigned integer<br/></span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><br/><span style="color: #0000ff;">uint</span> convertToInt32U(<span style="color: #0000ff;">byte</span><span style="color: #000000;">[] arr)<br/>{<br/></span><span style="color: #0000ff;">if</span> (arr.Length != <span style="color: #800080;">4</span><span style="color: #000000;">)<br/></span><span style="color: #0000ff;">return</span> <span style="color: #800080;">0</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">else</span><br/><span style="color: #0000ff;">return</span> Convert.ToUInt32(arr[<span style="color: #800080;">3</span>] &lt;&lt; <span style="color: #800080;">24</span> | arr[<span style="color: #800080;">2</span>] &lt;&lt; <span style="color: #800080;">16</span> | arr[<span style="color: #800080;">1</span>] &lt;&lt; <span style="color: #800080;">8</span> | arr[<span style="color: #800080;">0</span><span style="color: #000000;">]);<br/>} <br/></span><span style="color: #0000ff;">#region</span> IEnumerable Members<br/><span style="color: #0000ff;">public</span><span style="color: #000000;"> IEnumerator GetEnumerator()<br/>{<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> TODO: Add EXIFextractor.GetEnumerator implementation</span><br/><span style="color: #0000ff;">return</span> (<span style="color: #0000ff;">new</span> EXIFextractorEnumerator(<span style="color: #0000ff;">this</span><span style="color: #000000;">.propertiesHash));<br/>}<br/></span><span style="color: #0000ff;">#endregion</span><span style="color: #000000;"><br/>} <br/><br/></span><span style="color: #0000ff;">#region</span> EXIFextractorEnumerator class<br/><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><br/><span style="color: #808080;">///</span><span style="color: #008000;">dont touch this class. its for IEnumerator<br/></span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><br/><span style="color: #0000ff;">class</span><span style="color: #000000;"> EXIFextractorEnumerator : IEnumerator<br/>{<br/>Hashtable exifTable;<br/>IDictionaryEnumerator index; <br/><br/></span><span style="color: #0000ff;">internal</span><span style="color: #000000;"> EXIFextractorEnumerator(Hashtable exif)<br/>{<br/></span><span style="color: #0000ff;">this</span>.exifTable =<span style="color: #000000;"> exif;<br/></span><span style="color: #0000ff;">this</span><span style="color: #000000;">.Reset();<br/>index </span>=<span style="color: #000000;"> exif.GetEnumerator();<br/>} <br/><br/></span><span style="color: #0000ff;">#region</span> IEnumerator Members<br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Reset()<br/>{<br/></span><span style="color: #0000ff;">this</span>.index = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br/>} <br/></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">object</span><span style="color: #000000;"> Current<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">return</span> (<span style="color: #0000ff;">new</span> Pair(<span style="color: #0000ff;">this</span>.index.Key, <span style="color: #0000ff;">this</span><span style="color: #000000;">.index.Value));<br/>}<br/>} <br/><br/></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">bool</span><span style="color: #000000;"> MoveNext()<br/>{<br/></span><span style="color: #0000ff;">if</span> (index != <span style="color: #0000ff;">null</span> &amp;&amp;<span style="color: #000000;"> index.MoveNext())<br/></span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">true</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">else</span><br/><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">false</span><span style="color: #000000;">;<br/>} <br/></span><span style="color: #0000ff;">#endregion</span><span style="color: #000000;"><br/>}<br/></span><span style="color: #0000ff;">#endregion</span> <br/><br/><span style="color: #0000ff;">#region</span> Pair class<br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Pair<br/>{<br/></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> First;<br/></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> Second;<br/></span><span style="color: #0000ff;">public</span> Pair(<span style="color: #0000ff;">object</span> key, <span style="color: #0000ff;">object</span><span style="color: #000000;"> value)<br/>{<br/></span><span style="color: #0000ff;">this</span>.First =<span style="color: #000000;"> key.ToString();<br/></span><span style="color: #0000ff;">this</span>.Second =<span style="color: #000000;"> value.ToString();<br/>}<br/>}<br/></span><span style="color: #0000ff;">#endregion</span><span style="color: #000000;"><br/>}<br/><br/> <br/><br/>http:</span><span style="color: #008000;">//</span><span style="color: #008000;">artemismingr.spaces.live.com/?_c11_BlogPart_pagedir=Next&amp;_c11_BlogPart_handle=cns!69B8ABCD57092B10!1810&amp;_c11_BlogPart_BlogPart=blogview&amp;_c=BlogPart </span><br/><span style="color: #000000;"><br/> <br/><br/> <br/><br/>用C#读取图片的EXIF信息2 <br/></span><span style="color: #808080;">///</span><span style="color: #008000;">translation.cs</span><br/><span style="color: #0000ff;">using</span><span style="color: #000000;"> System;<br/></span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Collections.Generic;<br/></span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Collections;<br/></span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Text;<br/></span><span style="color: #0000ff;">namespace</span><span style="color: #000000;"> EXIF<br/>{<br/> </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><br/> <span style="color: #808080;">///</span><span style="color: #008000;"> Summary description for translation.<br/> </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><br/> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Translation : Hashtable<br/> {<br/> </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><br/> <span style="color: #808080;">///</span> <br/> <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><br/> <span style="color: #0000ff;">public</span><span style="color: #000000;"> Translation()<br/> {<br/> </span><span style="color: #008000;">//</span><span style="color: #008000;">IFD0 (main image) で使われているTag</span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x010e</span>, <span style="color: #800000;">"</span><span style="color: #800000;">ImageDescription</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画像タイトル </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x010f</span>, <span style="color: #800000;">"</span><span style="color: #800000;">Make</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> メーカ </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0110</span>, <span style="color: #800000;">"</span><span style="color: #800000;">Model</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> モデル </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x011a</span>, <span style="color: #800000;">"</span><span style="color: #800000;">XResolution</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画像の幅方向の解像度（ピクセル） </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x011b</span>, <span style="color: #800000;">"</span><span style="color: #800000;">YResolution</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画像の高さ方向の解像度（ピクセル）</span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0128</span>, <span style="color: #800000;">"</span><span style="color: #800000;">ResolutionUnit</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 解像度の単位 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0131</span>, <span style="color: #800000;">"</span><span style="color: #800000;">Software</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 使用したソフトウェア </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0132</span>, <span style="color: #800000;">"</span><span style="color: #800000;">ExifDateTime</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> ファイル変更日時</span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x013f</span>, <span style="color: #800000;">"</span><span style="color: #800000;">PrimaryChromaticities</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 原色の色座標値 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x8298</span>, <span style="color: #800000;">"</span><span style="color: #800000;">Copyright</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 著作権表示 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x8769</span>, <span style="color: #800000;">"</span><span style="color: #800000;">ExifIFDPointer</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> Exif IFD へのポインタ <br/> </span><span style="color: #008000;">//</span><span style="color: #008000;">Exif SubIFD で使われているTag</span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x829a</span>, <span style="color: #800000;">"</span><span style="color: #800000;">ExposureTime</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 露出時間（秒） </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x829d</span>, <span style="color: #800000;">"</span><span style="color: #800000;">FNumber</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> F値 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x8822</span>, <span style="color: #800000;">"</span><span style="color: #800000;">ExposureProgram</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 露出プログラム </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x8824</span>, <span style="color: #800000;">"</span><span style="color: #800000;">SpectralSensitivity</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> スペクトル感度</span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x8827</span>, <span style="color: #800000;">"</span><span style="color: #800000;">ISOSpeedRatings</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> ISOスピードレート </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x9000</span>, <span style="color: #800000;">"</span><span style="color: #800000;">ExifVersion</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> Exifバージョン </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x9003</span>, <span style="color: #800000;">"</span><span style="color: #800000;">DateTimeOriginal</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> オリジナル画像の生成日時 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x9004</span>, <span style="color: #800000;">"</span><span style="color: #800000;">DateTimeDigitized</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> ディジタルデータの生成日時 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x9101</span>, <span style="color: #800000;">"</span><span style="color: #800000;">ComponentsConfiguration</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> コンポーネントの意味 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x9102</span>, <span style="color: #800000;">"</span><span style="color: #800000;">CompressedBitsPerPixel</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画像圧縮モード（ビット／ピクセル）</span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x9201</span>, <span style="color: #800000;">"</span><span style="color: #800000;">ShutterSpeedValue</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> シャッタースピード（APEX） </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x9202</span>, <span style="color: #800000;">"</span><span style="color: #800000;">ApertureValue</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 絞り（APEX） </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x9203</span>, <span style="color: #800000;">"</span><span style="color: #800000;">BrightnessValue</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;">輝度（APEX） </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x9204</span>, <span style="color: #800000;">"</span><span style="color: #800000;">ExposureBiasValue</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 露出補正（APEX） </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x9205</span>, <span style="color: #800000;">"</span><span style="color: #800000;">MaxApertureValue</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> レンズの最小F値（APEX） </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x9206</span>, <span style="color: #800000;">"</span><span style="color: #800000;">SubjectDistance</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 被写体距離（m） </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x9207</span>, <span style="color: #800000;">"</span><span style="color: #800000;">MeteringMode</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;">測光方式 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x9208</span>, <span style="color: #800000;">"</span><span style="color: #800000;">LightSource</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 光源 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x9209</span>, <span style="color: #800000;">"</span><span style="color: #800000;">Flash</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> フラッシュ </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x920a</span>, <span style="color: #800000;">"</span><span style="color: #800000;">FocalLength</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> レンズの焦点距離（mm） </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x927c</span>, <span style="color: #800000;">"</span><span style="color: #800000;">MakerNote</span><span style="color: #800000;">"</span>); <span style="color: #008000;">//</span><span style="color: #008000;">メーカ固有情報 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x9286</span>, <span style="color: #800000;">"</span><span style="color: #800000;">UserComment</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> ユーザコメント </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x9290</span>, <span style="color: #800000;">"</span><span style="color: #800000;">SubSecTime</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;">ファイル変更日時の秒以下の値 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x9291</span>, <span style="color: #800000;">"</span><span style="color: #800000;">SubSecTimeOriginal</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画像生成日時の秒以下の値 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x9292</span>, <span style="color: #800000;">"</span><span style="color: #800000;">SubSecTimeDigitized</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> ディジタルデータ生成日時の秒以下の値 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0xa000</span>, <span style="color: #800000;">"</span><span style="color: #800000;">FlashPixVersion</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 対応FlashPixのバージョン </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0xa001</span>, <span style="color: #800000;">"</span><span style="color: #800000;">ColorSpace</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 色空間情報 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0xa002</span>, <span style="color: #800000;">"</span><span style="color: #800000;">ExifImageWidth </span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> メイン画像の幅 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0xa003</span>, <span style="color: #800000;">"</span><span style="color: #800000;">ExifImageHeight </span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> メイン画像の高さ</span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0xa004</span>, <span style="color: #800000;">"</span><span style="color: #800000;">RelatedSoundFile</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 関連音声ファイル名 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0xa005</span>, <span style="color: #800000;">"</span><span style="color: #800000;">InteroperabilityIFDPointer</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 互換性IFDへのポインタ </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0xa20e</span>, <span style="color: #800000;">"</span><span style="color: #800000;">FocalPlaneXResolution</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 焦点面の幅方向の解像度（ピクセル） </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0xa20f</span>, <span style="color: #800000;">"</span><span style="color: #800000;">FocalPlaneYResolution</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 焦点面の高さ方向の解像度（ピクセル） </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0xa210</span>, <span style="color: #800000;">"</span><span style="color: #800000;">FocalPlaneResolutionUnit</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 焦点面の解像度の単位 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0xa215</span>, <span style="color: #800000;">"</span><span style="color: #800000;">ExposureIndex</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 露出インデックス </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0xa217</span>, <span style="color: #800000;">"</span><span style="color: #800000;">SensingMethod</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画像センサの方式 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0xa300</span>, <span style="color: #800000;">"</span><span style="color: #800000;">FileSource</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画像入力機器の種類 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0xa301</span>, <span style="color: #800000;">"</span><span style="color: #800000;">SceneType</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;">シーンタイプ </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0xa302</span>, <span style="color: #800000;">"</span><span style="color: #800000;">CFAPattern</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;">CFAパターン <br/> </span><span style="color: #008000;">//</span><span style="color: #008000;">IFD1 (thumbnail image) で使われているTag</span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0100</span>, <span style="color: #800000;">"</span><span style="color: #800000;">ImageWidth </span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画像の幅（ピクセル） </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0101</span>, <span style="color: #800000;">"</span><span style="color: #800000;">ImageHeight </span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画像の高さ（ピクセル）</span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0102</span>, <span style="color: #800000;">"</span><span style="color: #800000;">BitsPerSample</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画素のビットの深さ（ビット） </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0103</span>, <span style="color: #800000;">"</span><span style="color: #800000;">Compression</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 圧縮の種類 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0106</span>, <span style="color: #800000;">"</span><span style="color: #800000;">PhotometricInterpretation</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画素構成の種類 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0111</span>, <span style="color: #800000;">"</span><span style="color: #800000;">StripOffsets</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> イメージデータへのオフセット </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0112</span>, <span style="color: #800000;">"</span><span style="color: #800000;">Orientation</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画素の並び </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0115</span>, <span style="color: #800000;">"</span><span style="color: #800000;">SamplesPerPixel</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> ピクセル毎のコンポーネント数 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0116</span>, <span style="color: #800000;">"</span><span style="color: #800000;">RowsPerStrip</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> １ストリップあたりの行数 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0117</span>, <span style="color: #800000;">"</span><span style="color: #800000;">StripByteCounts</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 各ストリップのサイズ（バイト）</span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x011c</span>, <span style="color: #800000;">"</span><span style="color: #800000;">PlanarConfiguration</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画素データの並び</span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0201</span>, <span style="color: #800000;">"</span><span style="color: #800000;">JPEGInterchangeFormat</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> JPEGサムネイルのSOIへのオフセット </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0202</span>, <span style="color: #800000;">"</span><span style="color: #800000;">JPEGInterchangeFormatLength</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> JPEGサムネイルデータのサイズ（バイト</span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0211</span>, <span style="color: #800000;">"</span><span style="color: #800000;">YCbCrCoefficients</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 色変換マトリックス係数 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0212</span>, <span style="color: #800000;">"</span><span style="color: #800000;">YCbCrSubSampling</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画素の比率構成 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0213</span>, <span style="color: #800000;">"</span><span style="color: #800000;">YCbCrPositioning </span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 色情報のサンプリング</span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0214</span>, <span style="color: #800000;">"</span><span style="color: #800000;">ReferenceBlackWhite</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 黒色と白色の値 <br/> </span><span style="color: #008000;">//</span><span style="color: #008000;">その他のTag</span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x00fe</span>, <span style="color: #800000;">"</span><span style="color: #800000;">NewSubfileType</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> </span><span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x00ff</span>, <span style="color: #800000;">"</span><span style="color: #800000;">SubfileType</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> </span><span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x012d</span>, <span style="color: #800000;">"</span><span style="color: #800000;">TransferFunction</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 諧調カーブ特性 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x013b</span>, <span style="color: #800000;">"</span><span style="color: #800000;">Artist</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 撮影者名</span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x013d</span>, <span style="color: #800000;">"</span><span style="color: #800000;">Predictor</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> </span><span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x013e</span>, <span style="color: #800000;">"</span><span style="color: #800000;">WhitePoint</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> ホワイトポイントの色座標値 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0142</span>, <span style="color: #800000;">"</span><span style="color: #800000;">TileWidth</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> </span><span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0143</span>, <span style="color: #800000;">"</span><span style="color: #800000;">TileLength</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> </span><span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0144</span>, <span style="color: #800000;">"</span><span style="color: #800000;">TileOffsets</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> </span><span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0145</span>, <span style="color: #800000;">"</span><span style="color: #800000;">TileByteCounts</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> </span><span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x014a</span>, <span style="color: #800000;">"</span><span style="color: #800000;">SubIFDs</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> </span><span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x015b</span>, <span style="color: #800000;">"</span><span style="color: #800000;">JPEGTables</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> </span><span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x828d</span>, <span style="color: #800000;">"</span><span style="color: #800000;">CFARepeatPatternDim</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> </span><span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x828f</span>, <span style="color: #800000;">"</span><span style="color: #800000;">BatteryLevel </span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> </span><span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x83bb</span>, <span style="color: #800000;">"</span><span style="color: #800000;">IPTC/NAA</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> </span><span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x8773</span>, <span style="color: #800000;">"</span><span style="color: #800000;">InterColorProfile</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> </span><span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x8825</span>, <span style="color: #800000;">"</span><span style="color: #800000;">GPSInfo</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> GPS情報IFDへのポインタ</span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x8828</span>, <span style="color: #800000;">"</span><span style="color: #800000;">OECF</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 光電変換関数 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x8829</span>, <span style="color: #800000;">"</span><span style="color: #800000;">Interlace</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> </span><span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x882a</span>, <span style="color: #800000;">"</span><span style="color: #800000;">TimeZoneOffset</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> </span><span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x882b</span>, <span style="color: #800000;">"</span><span style="color: #800000;">SelfTimerMode</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> </span><span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x920b</span>, <span style="color: #800000;">"</span><span style="color: #800000;">FlashEnergy </span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> フラッシュのエネルギー（BCPS）</span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x920c</span>, <span style="color: #800000;">"</span><span style="color: #800000;">SpatialFrequencyResponse</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;">空間周波数応答 </span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x920d</span>, <span style="color: #800000;">"</span><span style="color: #800000;">Noise</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> </span><span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x9211</span>, <span style="color: #800000;">"</span><span style="color: #800000;">ImageNumber</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> </span><span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x9212</span>, <span style="color: #800000;">"</span><span style="color: #800000;">SecurityClassification</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> </span><span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x9213</span>, <span style="color: #800000;">"</span><span style="color: #800000;">ImageHistory</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> </span><span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x9214</span>, <span style="color: #800000;">"</span><span style="color: #800000;">SubjectLocation</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;">被写体位置</span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x9216</span>, <span style="color: #800000;">"</span><span style="color: #800000;">TIFFEPStandardID</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> </span><span style="color: #008000;">//</span><span style="color: #008000;">Interoperability IFD で使われているTag</span><br/> <span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0001</span>, <span style="color: #800000;">"</span><span style="color: #800000;">InteroperabilityIndex</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> </span><span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x0002</span>, <span style="color: #800000;">"</span><span style="color: #800000;">InteroperabilityVersion</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> </span><span style="color: #0000ff;">this</span>.Add(<span style="color: #800080;">0x1000</span>, <span style="color: #800000;">"</span><span style="color: #800000;">RelatedImageFileFormat</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> }<br/> }<br/> </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><br/> <span style="color: #808080;">///</span><span style="color: #008000;"> private class<br/> </span><span style="color: #808080;">///</span><span style="color: #008000;"> RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.<br/> </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><br/> <span style="color: #0000ff;">internal</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Rational<br/> {<br/> </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> n;<br/> </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> d;<br/> </span><span style="color: #0000ff;">public</span> Rational(<span style="color: #0000ff;">int</span> n, <span style="color: #0000ff;">int</span><span style="color: #000000;"> d)<br/> {<br/> </span><span style="color: #0000ff;">this</span>.n =<span style="color: #000000;"> n;<br/> </span><span style="color: #0000ff;">this</span>.d =<span style="color: #000000;"> d;<br/> simplify(</span><span style="color: #0000ff;">ref</span> <span style="color: #0000ff;">this</span>.n, <span style="color: #0000ff;">ref</span> <span style="color: #0000ff;">this</span><span style="color: #000000;">.d);<br/> }<br/> </span><span style="color: #0000ff;">public</span> Rational(<span style="color: #0000ff;">uint</span> n, <span style="color: #0000ff;">uint</span><span style="color: #000000;"> d)<br/> {<br/> </span><span style="color: #0000ff;">this</span>.n =<span style="color: #000000;"> Convert.ToInt32(n);<br/> </span><span style="color: #0000ff;">this</span>.d =<span style="color: #000000;"> Convert.ToInt32(d);<br/> simplify(</span><span style="color: #0000ff;">ref</span> <span style="color: #0000ff;">this</span>.n, <span style="color: #0000ff;">ref</span> <span style="color: #0000ff;">this</span><span style="color: #000000;">.d);<br/> }<br/> </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Rational()<br/> {<br/> </span><span style="color: #0000ff;">this</span>.n = <span style="color: #0000ff;">this</span>.d = <span style="color: #800080;">0</span><span style="color: #000000;">;<br/> }<br/> </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> ToString(<span style="color: #0000ff;">string</span><span style="color: #000000;"> sp)<br/> {<br/> </span><span style="color: #0000ff;">if</span> (sp == <span style="color: #0000ff;">null</span>) sp = <span style="color: #800000;">"</span><span style="color: #800000;">/</span><span style="color: #800000;">"</span><span style="color: #000000;">;<br/> </span><span style="color: #0000ff;">return</span> n.ToString() + sp +<span style="color: #000000;"> d.ToString();<br/> }<br/> </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">double</span><span style="color: #000000;"> ToDouble()<br/> {<br/> </span><span style="color: #0000ff;">if</span> (d == <span style="color: #800080;">0</span><span style="color: #000000;">)<br/> </span><span style="color: #0000ff;">return</span> <span style="color: #800080;">0.0</span><span style="color: #000000;">;<br/> </span><span style="color: #0000ff;">return</span> Math.Round(Convert.ToDouble(n) / Convert.ToDouble(d), <span style="color: #800080;">2</span><span style="color: #000000;">);<br/> }<br/> </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> simplify(<span style="color: #0000ff;">ref</span> <span style="color: #0000ff;">int</span> a, <span style="color: #0000ff;">ref</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> b)<br/> {<br/> </span><span style="color: #0000ff;">if</span> (a == <span style="color: #800080;">0</span> || b == <span style="color: #800080;">0</span><span style="color: #000000;">)<br/> </span><span style="color: #0000ff;">return</span><span style="color: #000000;">;<br/> </span><span style="color: #0000ff;">int</span> gcd =<span style="color: #000000;"> euclid(a, b);<br/> a </span>/=<span style="color: #000000;"> gcd;<br/> b </span>/=<span style="color: #000000;"> gcd;<br/> }<br/> </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span> euclid(<span style="color: #0000ff;">int</span> a, <span style="color: #0000ff;">int</span><span style="color: #000000;"> b)<br/> {<br/> </span><span style="color: #0000ff;">if</span> (b == <span style="color: #800080;">0</span><span style="color: #000000;">)<br/> </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> a;<br/> </span><span style="color: #0000ff;">else</span><br/> <span style="color: #0000ff;">return</span> euclid(b, a %<span style="color: #000000;"> b);<br/> }<br/> }<br/>}<br/><br/> <br/></span><span style="color: #008000;">//</span> <br/><span style="color: #000000;"> EXIFMetaData.cs<br/></span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System;<br/></span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Collections.Generic;<br/></span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Text;<br/></span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Drawing;<br/></span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Drawing.Imaging;<br/></span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Collections;<br/></span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.ComponentModel;<br/></span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Reflection;<br/></span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.IO;<br/></span><span style="color: #0000ff;">using</span><span style="color: #000000;"> EXIF;<br/></span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Collections.Specialized;<br/></span><span style="color: #0000ff;">namespace</span><span style="color: #000000;"> PictureView<br/>{<br/> </span><span style="color: #0000ff;">class</span><span style="color: #000000;"> EXIFMetaData<br/> {<br/> </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> EXIFMetaData()<br/> {<br/> }<br/> </span><span style="color: #0000ff;">#region</span> struct MetadataDetail<br/> <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><br/> <span style="color: #808080;">///</span><span style="color: #008000;"> 構造体<br/> </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><br/> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">struct</span><span style="color: #000000;"> MetadataDetail<br/> {<br/> </span><span style="color: #008000;">//</span><span style="color: #008000;">public string RawValueAsString;</span><span style="color: #008000;">//</span><span style="color: #008000;">原文字列</span><br/> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> DisplayValue;<span style="color: #008000;">//<br/></span><span style="color: #000000;"> }<br/> </span><span style="color: #0000ff;">#endregion</span><br/> <span style="color: #0000ff;">#region</span> EXIF Element<br/> <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span><br/> <span style="color: #808080;">///</span><span style="color: #008000;"> EXIF Elementを保存した<br/> </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span><br/> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">struct</span><span style="color: #000000;"> Metadata<br/> {<br/> </span><span style="color: #008000;">//</span><span style="color: #008000;">IFD0 (main image) で使われているTag</span><br/> <span style="color: #0000ff;">public</span> MetadataDetail ImageDescription;<span style="color: #008000;">//</span><span style="color: #008000;"> 画像タイトル </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail Make;<span style="color: #008000;">//</span><span style="color: #008000;"> メーカ </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail Model;<span style="color: #008000;">//</span><span style="color: #008000;"> モデル </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail XResolution;<span style="color: #008000;">//</span><span style="color: #008000;"> 画像の幅方向の解像度（ピクセル） </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail YResolution;<span style="color: #008000;">//</span><span style="color: #008000;"> 画像の高さ方向の解像度（ピクセル）</span><br/> <span style="color: #0000ff;">public</span> MetadataDetail ResolutionUnit;<span style="color: #008000;">//</span><span style="color: #008000;"> 解像度の単位 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail Software;<span style="color: #008000;">//</span><span style="color: #008000;"> 使用したソフトウェア </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail ExifDateTime;<span style="color: #008000;">//</span><span style="color: #008000;"> ファイル変更日時</span><br/> <span style="color: #0000ff;">public</span> MetadataDetail PrimaryChromaticities;<span style="color: #008000;">//</span><span style="color: #008000;"> 原色の色座標値 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail Copyright;<span style="color: #008000;">//</span><span style="color: #008000;"> 著作権表示 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail ExifIFDPointer;<span style="color: #008000;">//</span><span style="color: #008000;"> Exif IFD へのポインタ <br/> </span><span style="color: #008000;">//</span><span style="color: #008000;">Exif SubIFD で使われているTag</span><br/> <span style="color: #0000ff;">public</span> MetadataDetail ExposureTime;<span style="color: #008000;">//</span><span style="color: #008000;"> 露出時間（秒） </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail FNumber;<span style="color: #008000;">//</span><span style="color: #008000;"> F値 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail ExposureProgram;<span style="color: #008000;">//</span><span style="color: #008000;"> 露出プログラム </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail SpectralSensitivity;<span style="color: #008000;">//</span><span style="color: #008000;"> スペクトル感度</span><br/> <span style="color: #0000ff;">public</span> MetadataDetail ISOSpeedRatings;<span style="color: #008000;">//</span><span style="color: #008000;"> ISOスピードレート </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail ExifVersion;<span style="color: #008000;">//</span><span style="color: #008000;"> Exifバージョン </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail DateTimeOriginal;<span style="color: #008000;">//</span><span style="color: #008000;"> オリジナル画像の生成日時 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail DateTimeDigitized;<span style="color: #008000;">//</span><span style="color: #008000;"> ディジタルデータの生成日時 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail ComponentsConfiguration;<span style="color: #008000;">//</span><span style="color: #008000;"> コンポーネントの意味 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail CompressedBitsPerPixel;<span style="color: #008000;">//</span><span style="color: #008000;"> 画像圧縮モード（ビット／ピクセル）</span><br/> <span style="color: #0000ff;">public</span> MetadataDetail ShutterSpeedValue;<span style="color: #008000;">//</span><span style="color: #008000;"> シャッタースピード（APEX） </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail ApertureValue;<span style="color: #008000;">//</span><span style="color: #008000;"> 絞り（APEX） </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail BrightnessValue;<span style="color: #008000;">//</span><span style="color: #008000;">輝度（APEX） </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail ExposureBiasValue;<span style="color: #008000;">//</span><span style="color: #008000;"> 露出補正（APEX） </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail MaxApertureValue;<span style="color: #008000;">//</span><span style="color: #008000;"> レンズの最小F値（APEX） </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail SubjectDistance;<span style="color: #008000;">//</span><span style="color: #008000;"> 被写体距離（m） </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail MeteringMode;<span style="color: #008000;">//</span><span style="color: #008000;">測光方式 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail LightSource;<span style="color: #008000;">//</span><span style="color: #008000;"> 光源 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail Flash;<span style="color: #008000;">//</span><span style="color: #008000;"> フラッシュ </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail FocalLength;<span style="color: #008000;">//</span><span style="color: #008000;"> レンズの焦点距離（mm） </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail MakerNote; <span style="color: #008000;">//</span><span style="color: #008000;">メーカ固有情報 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail UserComment;<span style="color: #008000;">//</span><span style="color: #008000;"> ユーザコメント </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail SubSecTime;<span style="color: #008000;">//</span><span style="color: #008000;">ファイル変更日時の秒以下の値 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail SubSecTimeOriginal;<span style="color: #008000;">//</span><span style="color: #008000;"> 画像生成日時の秒以下の値 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail SubSecTimeDigitized;<span style="color: #008000;">//</span><span style="color: #008000;"> ディジタルデータ生成日時の秒以下の値 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail FlashPixVersion;<span style="color: #008000;">//</span><span style="color: #008000;"> 対応FlashPixのバージョン </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail ColorSpace;<span style="color: #008000;">//</span><span style="color: #008000;"> 色空間情報 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail ExifImageWidth;<span style="color: #008000;">//</span><span style="color: #008000;"> メイン画像の幅 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail ExifImageHeight;<span style="color: #008000;">//</span><span style="color: #008000;"> メイン画像の高さ</span><br/> <span style="color: #0000ff;">public</span> MetadataDetail RelatedSoundFile;<span style="color: #008000;">//</span><span style="color: #008000;"> 関連音声ファイル名 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail InteroperabilityIFDPointer;<span style="color: #008000;">//</span><span style="color: #008000;"> 互換性IFDへのポインタ </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail FocalPlaneXResolution;<span style="color: #008000;">//</span><span style="color: #008000;"> 焦点面の幅方向の解像度（ピクセル） </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail FocalPlaneYResolution;<span style="color: #008000;">//</span><span style="color: #008000;"> 焦点面の高さ方向の解像度（ピクセル） </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail FocalPlaneResolutionUnit;<span style="color: #008000;">//</span><span style="color: #008000;"> 焦点面の解像度の単位 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail ExposureIndex;<span style="color: #008000;">//</span><span style="color: #008000;"> 露出インデックス </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail SensingMethod;<span style="color: #008000;">//</span><span style="color: #008000;"> 画像センサの方式 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail FileSource;<span style="color: #008000;">//</span><span style="color: #008000;"> 画像入力機器の種類 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail SceneType;<span style="color: #008000;">//</span><span style="color: #008000;">シーンタイプ </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail CFAPattern;<span style="color: #008000;">//</span><span style="color: #008000;">CFAパターン <br/> </span><span style="color: #008000;">//</span><span style="color: #008000;">IFD1 (thumbnail image) で使われているTag</span><br/> <span style="color: #0000ff;">public</span> MetadataDetail ImageWidth;<span style="color: #008000;">//</span><span style="color: #008000;"> 画像の幅（ピクセル） </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail ImageHeight;<span style="color: #008000;">//</span><span style="color: #008000;"> 画像の高さ（ピクセル）</span><br/> <span style="color: #0000ff;">public</span> MetadataDetail BitsPerSample;<span style="color: #008000;">//</span><span style="color: #008000;"> 画素のビットの深さ（ビット） </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail Compression;<span style="color: #008000;">//</span><span style="color: #008000;"> 圧縮の種類 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail PhotometricInterpretation;<span style="color: #008000;">//</span><span style="color: #008000;"> 画素構成の種類 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail StripOffsets;<span style="color: #008000;">//</span><span style="color: #008000;"> イメージデータへのオフセット </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail Orientation;<span style="color: #008000;">//</span><span style="color: #008000;"> 画素の並び </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail SamplesPerPixel;<span style="color: #008000;">//</span><span style="color: #008000;"> ピクセル毎のコンポーネント数 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail RowsPerStrip;<span style="color: #008000;">//</span><span style="color: #008000;"> １ストリップあたりの行数 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail StripByteCounts;<span style="color: #008000;">//</span><span style="color: #008000;"> 各ストリップのサイズ（バイト）</span><br/> <span style="color: #0000ff;">public</span> MetadataDetail PlanarConfiguration;<span style="color: #008000;">//</span><span style="color: #008000;"> 画素データの並び</span><br/> <span style="color: #0000ff;">public</span> MetadataDetail JPEGInterchangeFormat;<span style="color: #008000;">//</span><span style="color: #008000;"> JPEGサムネイルのSOIへのオフセット </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail JPEGInterchangeFormatLength;<span style="color: #008000;">//</span><span style="color: #008000;"> JPEGサムネイルデータのサイズ（バイト</span><br/> <span style="color: #0000ff;">public</span> MetadataDetail YCbCrCoefficients;<span style="color: #008000;">//</span><span style="color: #008000;"> 色変換マトリックス係数 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail YCbCrSubSampling;<span style="color: #008000;">//</span><span style="color: #008000;"> 画素の比率構成 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail YCbCrPositioning;<span style="color: #008000;">//</span><span style="color: #008000;"> 色情報のサンプリング</span><br/> <span style="color: #0000ff;">public</span> MetadataDetail ReferenceBlackWhite;<span style="color: #008000;">//</span><span style="color: #008000;"> 黒色と白色の値 <br/> </span><span style="color: #008000;">//</span><span style="color: #008000;">その他</span><br/> <span style="color: #0000ff;">public</span><span style="color: #000000;"> MetadataDetail NewSubfileType;<br/> </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> MetadataDetail SubfileType;<br/> </span><span style="color: #0000ff;">public</span> MetadataDetail TransferFunction;<span style="color: #008000;">//</span><span style="color: #008000;"> 諧調カーブ特性 </span><br/> <span style="color: #0000ff;">public</span> MetadataDetail Artist;<span style="color: #008000;">//</span><span style="color: #008000;"> 撮影者名</span><br/> <span style="color: #0000ff;">public</span><span style="color: #000000;"> MetadataDetail Predictor;<br/> </span><span style="color: #0000ff;">public</span> MetadataDetail WhitePoint;<span style="color: #008000;">//</span><span style="color: #008000;"> ホワイトポイントの色座標値 ;</span><br/> <span style="color: #0000ff;">public</span><span style="color: #000000;"> MetadataDetail TileWidth;<br/> </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> MetadataDetail TileLength;<br/> </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> MetadataDetail TileOffsets;<br/> </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> MetadataDetail TileByteCounts;<br/> </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> MetadataDetail SubIFDs;<br/> </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> MetadataDetail JPEGTables;<br/> </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> MetadataDetail CFARepeatPatternDim;<br/> </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> MetadataDetail BatteryLevel;<br/> </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> MetadataDetail IPTCNAA;<br/> </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> MetadataDetail InterColorProfile;<br/> </span><span style="color: #0000ff;">public</span> MetadataDetail GPSInfo;<span style="color: #008000;">//</span><span style="color: #008000;"> GPS情報IFDへのポインタ</span><br/> <span style="color: #0000ff;">public</span> MetadataDetail OECF;<span style="color: #008000;">//</span><span style="color: #008000;"> 光電変換関数 </span><br/> <span style="color: #0000ff;">public</span><span style="color: #000000;"> MetadataDetail Interlace;<br/> </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> MetadataDetail TimeZoneOffset;<br/> </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> MetadataDetail SelfTimerMode;<br/> </span><span style="color: #0000ff;">public</span> MetadataDetail FlashEnergy;<span style="color: #008000;">//</span><span style="color: #008000;"> フラッシュのエネルギー（BCPS）</span><br/> <span style="color: #0000ff;">public</span> MetadataDetail SpatialFrequencyResponse;<span style="color: #008000;">//</span><span style="color: #008000;">空間周波数応答 </span><br/> <span style="color: #0000ff;">public</span><span style="color: #000000;"> MetadataDetail Noise;<br/> </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> MetadataDetail ImageNumber;<br/> </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> MetadataDetail SecurityClassification;<br/> </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> MetadataDetail ImageHistory;<br/> </span><span style="color: #0000ff;">public</span> MetadataDetail SubjectLocation;<span style="color: #008000;">//</span><span style="color: #008000;">被写体位置</span><br/> <span style="color: #0000ff;">public</span><span style="color: #000000;"> MetadataDetail TIFFEPStandardID;<br/> </span><span style="color: #008000;">//</span><span style="color: #008000;">Interoperability IFD で使われているTag</span><br/> <span style="color: #0000ff;">public</span><span style="color: #000000;"> MetadataDetail InteroperabilityIndex;<br/> </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> MetadataDetail InteroperabilityVersion;<br/> </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> MetadataDetail RelatedImageFileFormat;<br/> }<br/> </span><span style="color: #0000ff;">#endregion</span><br/> <span style="color: #0000ff;">#region</span> EXIF情報を取得<br/> <span style="color: #0000ff;">public</span> Metadata GetEXIFMetaData(<span style="color: #0000ff;">string</span><span style="color: #000000;"> PhotoName)<br/> {<br/> </span><span style="color: #008000;">//</span> <br/> Bitmap MyImage =<span style="color: #000000;"> (Bitmap)Bitmap.FromFile(PhotoName);<br/> EXIFextractor exifExtractor </span>= <span style="color: #0000ff;">new</span> EXIFextractor(<span style="color: #0000ff;">ref</span> MyImage, <span style="color: #800000;">"</span><span style="color: #800000;">/n</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> NameValueCollection items </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> NameValueCollection();<br/> </span><span style="color: #0000ff;">foreach</span> (Pair pair <span style="color: #0000ff;">in</span><span style="color: #000000;"> exifExtractor)<br/> {<br/> items.Add(pair.First, pair.Second);<br/> }<br/> Metadata MyMetadata </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> Metadata();<br/> </span><span style="color: #0000ff;">try</span><span style="color: #000000;"><br/> {<br/> MyMetadata.ImageDescription.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">ImageDescription</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画像タイトル </span><br/> MyMetadata.Make.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">Make</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> メーカ </span><br/> MyMetadata.Model.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">Model</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> モデル <br/> </span><span style="color: #008000;">//</span><span style="color: #008000;">MyMetadata.XResolution.DisplayValue = items.Get("XResolution");</span><span style="color: #008000;">//</span><span style="color: #008000;"> 画像の幅方向の解像度（ピクセル） <br/> </span><span style="color: #008000;">//</span><span style="color: #008000;">MyMetadata.YResolution.DisplayValue = items.Get("YResolution");</span><span style="color: #008000;">//</span><span style="color: #008000;"> 画像の高さ方向の解像度（ピクセル）</span><br/> MyMetadata.XResolution.DisplayValue =<span style="color: #000000;"> MyImage.HorizontalResolution.ToString();<br/> MyMetadata.YResolution.DisplayValue </span>=<span style="color: #000000;"> MyImage.VerticalResolution.ToString();<br/> MyMetadata.ResolutionUnit.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">ResolutionUnit</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 解像度の単位 </span><br/> MyMetadata.Software.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">Software</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 使用したソフトウェア </span><br/> MyMetadata.ExifDateTime.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">ExifDateTime</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> ファイル変更日時</span><br/> MyMetadata.PrimaryChromaticities.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">PrimaryChromaticities</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 原色の色座標値 </span><br/> MyMetadata.Copyright.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">Copyright</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 著作権表示 </span><br/> MyMetadata.ExifIFDPointer.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">ExifIFDPointer</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> Exif IFD へのポインタ </span><br/> MyMetadata.ExposureTime.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">ExposureTime</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 露出時間（秒） </span><br/> MyMetadata.FNumber.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">FNumber</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> F値 </span><br/> MyMetadata.ExposureProgram.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">ExposureProgram</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 露出プログラム </span><br/> MyMetadata.SpectralSensitivity.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">SpectralSensitivity</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> スペクトル感度</span><br/> MyMetadata.ISOSpeedRatings.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">ISOSpeedRatings</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> ISOスピードレート </span><br/> MyMetadata.ExifVersion.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">ExifVersion</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> Exifバージョン </span><br/> MyMetadata.DateTimeOriginal.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">DateTimeOriginal</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> オリジナル画像の生成日時 </span><br/> MyMetadata.DateTimeDigitized.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">DateTimeDigitized</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> ディジタルデータの生成日時 </span><br/> MyMetadata.ComponentsConfiguration.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">ComponentsConfiguration</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> コンポーネントの意味 </span><br/> MyMetadata.CompressedBitsPerPixel.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">CompressedBitsPerPixel</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画像圧縮モード（ビット／ピクセル）</span><br/> MyMetadata.ShutterSpeedValue.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">ShutterSpeedValue</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> シャッタースピード（APEX） </span><br/> MyMetadata.ApertureValue.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">ApertureValue</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 絞り（APEX） </span><br/> MyMetadata.BrightnessValue.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">BrightnessValue</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;">輝度（APEX） </span><br/> MyMetadata.ExposureBiasValue.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">ExposureBiasValue</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 露出補正（APEX） </span><br/> MyMetadata.MaxApertureValue.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">MaxApertureValue</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> レンズの最小F値（APEX） </span><br/> MyMetadata.SubjectDistance.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">SubjectDistance</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 被写体距離（m） </span><br/> MyMetadata.MeteringMode.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">MeteringMode</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;">測光方式 </span><br/> MyMetadata.LightSource.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">LightSource</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 光源 </span><br/> MyMetadata.Flash.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">Flash</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> フラッシュ </span><br/> MyMetadata.FocalLength.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">FocalLength</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> レンズの焦点距離（mm） </span><br/> MyMetadata.MakerNote.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">MakerNote</span><span style="color: #800000;">"</span>); <span style="color: #008000;">//</span><span style="color: #008000;">メーカ固有情報 </span><br/> MyMetadata.UserComment.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">UserComment</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> ユーザコメント </span><br/> MyMetadata.SubSecTime.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">SubSecTime</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;">ファイル変更日時の秒以下の値 </span><br/> MyMetadata.SubSecTimeOriginal.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">SubSecTimeOriginal</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画像生成日時の秒以下の値 </span><br/> MyMetadata.SubSecTimeDigitized.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">SubSecTimeDigitized</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> ディジタルデータ生成日時の秒以下の値 </span><br/> MyMetadata.FlashPixVersion.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">FlashPixVersion</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 対応FlashPixのバージョン </span><br/> MyMetadata.ColorSpace.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">ColorSpace</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 色空間情報 </span><br/> MyMetadata.ExifImageWidth.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">ExifImageWidth </span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> メイン画像の幅 </span><br/> MyMetadata.ExifImageHeight.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">ExifImageHeight </span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> メイン画像の高さ</span><br/> MyMetadata.RelatedSoundFile.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">RelatedSoundFile</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 関連音声ファイル名 </span><br/> MyMetadata.InteroperabilityIFDPointer.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">InteroperabilityIFDPointer</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 互換性IFDへのポインタ </span><br/> MyMetadata.FocalPlaneXResolution.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">FocalPlaneXResolution</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 焦点面の幅方向の解像度（ピクセル） </span><br/> MyMetadata.FocalPlaneYResolution.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">FocalPlaneYResolution</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 焦点面の高さ方向の解像度（ピクセル） </span><br/> MyMetadata.FocalPlaneResolutionUnit.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">FocalPlaneResolutionUnit</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 焦点面の解像度の単位 </span><br/> MyMetadata.ExposureIndex.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">ExposureIndex</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 露出インデックス </span><br/> MyMetadata.SensingMethod.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">SensingMethod</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画像センサの方式 </span><br/> MyMetadata.FileSource.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">FileSource</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画像入力機器の種類 </span><br/> MyMetadata.SceneType.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">シーSceneType</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;">シーンタイプ </span><br/> MyMetadata.CFAPattern.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">CFACFAPattern</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;">CFAパターン </span><br/> MyMetadata.ImageWidth.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">ImageWidth</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画像の幅（ピクセル） </span><br/> MyMetadata.ImageHeight.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">ImageHeight</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画像の高さ（ピクセル）</span><br/> MyMetadata.BitsPerSample.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">BitsPerSample</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画素のビットの深さ（ビット） </span><br/> MyMetadata.Compression.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">Compression</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 圧縮の種類 </span><br/> MyMetadata.PhotometricInterpretation.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">PhotometricInterpretation</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画素構成の種類 </span><br/> MyMetadata.StripOffsets.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">StripOffsets</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> イメージデータへのオフセット </span><br/> MyMetadata.Orientation.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">Orientation</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画素の並び </span><br/> MyMetadata.SamplesPerPixel.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">SamplesPerPixel</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> ピクセル毎のコンポーネント数 </span><br/> MyMetadata.RowsPerStrip.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">RowsPerStrip</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> １ストリップあたりの行数 </span><br/> MyMetadata.StripByteCounts.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">StripByteCounts</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 各ストリップのサイズ（バイト）</span><br/> MyMetadata.PlanarConfiguration.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">PlanarConfiguration</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画素データの並び</span><br/> MyMetadata.JPEGInterchangeFormat.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">JPEGInterchangeFormat</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> JPEGサムネイルのSOIへのオフセット </span><br/> MyMetadata.JPEGInterchangeFormatLength.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">JPEGInterchangeFormatLength</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> JPEGサムネイルデータのサイズ（バイト</span><br/> MyMetadata.YCbCrCoefficients.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">YCbCrCoefficients</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 色変換マトリックス係数 </span><br/> MyMetadata.YCbCrSubSampling.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">YCbCrSubSampling</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 画素の比率構成 </span><br/> MyMetadata.YCbCrPositioning.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">YCbCrPositioning </span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 色情報のサンプリング</span><br/> MyMetadata.ReferenceBlackWhite.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">ReferenceBlackWhite</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 黒色と白色の値 </span><br/> MyMetadata.NewSubfileType.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">NewSubfileType</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> MyMetadata.SubfileType.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">SubfileType</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> MyMetadata.TransferFunction.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">TransferFunction</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 諧調カーブ特性 </span><br/> MyMetadata.Artist.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">Artist</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 撮影者名</span><br/> MyMetadata.Predictor.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">Predictor</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> MyMetadata.WhitePoint.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">WhitePoint</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> ホワイトポイントの色座標値 </span><br/> MyMetadata.TileWidth.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">TileWidth</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> MyMetadata.TileLength.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">TileLength</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> MyMetadata.TileOffsets.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">TileOffsets</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> MyMetadata.TileByteCounts.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">TileByteCounts</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> MyMetadata.SubIFDs.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">SubIFDs</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> MyMetadata.JPEGTables.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">JPEGTables</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> MyMetadata.CFARepeatPatternDim.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">CFARepeatPatternDim</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> MyMetadata.BatteryLevel.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">BatteryLevel </span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> MyMetadata.IPTCNAA.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">IPTCNAA</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> MyMetadata.InterColorProfile.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">InterColorProfile</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> MyMetadata.GPSInfo.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">GPSInfo</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> GPS情報IFDへのポインタ</span><br/> MyMetadata.OECF.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">OECF</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> 光電変換関数 </span><br/> MyMetadata.Interlace.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">Interlace</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> MyMetadata.TimeZoneOffset.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">TimeZoneOffset</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> MyMetadata.SelfTimerMode.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">SelfTimerMode</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> MyMetadata.FlashEnergy.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">FlashEnergy </span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;"> フラッシュのエネルギー（BCPS）</span><br/> MyMetadata.SpatialFrequencyResponse.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">SpatialFrequencyResponse</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;">空間周波数応答 </span><br/> MyMetadata.Noise.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">Noise </span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> MyMetadata.ImageNumber.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">ImageNumber</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> MyMetadata.SecurityClassification.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">SecurityClassification</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> MyMetadata.ImageHistory.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">ImageHistory</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> MyMetadata.SubjectLocation.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">SubjectLocation</span><span style="color: #800000;">"</span>);<span style="color: #008000;">//</span><span style="color: #008000;">被写体位置</span><br/> MyMetadata.TIFFEPStandardID.DisplayValue = items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">TIFFEPStandardID</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> MyMetadata.InteroperabilityIndex.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">InteroperabilityIndex</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> MyMetadata.InteroperabilityVersion.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">InteroperabilityVersion</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> MyMetadata.RelatedImageFileFormat.DisplayValue </span>= items.Get(<span style="color: #800000;">"</span><span style="color: #800000;">RelatedImageFileFormat</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/> }<br/> </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"><br/> { <br/> }<br/> items.Clear();<br/> </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> MyMetadata;<br/> }<br/> </span><span style="color: #0000ff;">#endregion</span><span style="color: #000000;"><br/> }<br/>}</span></div><p>&nbsp;</p><img src="http://counter.cnblogs.com/blog/rss/2663310" width="1" height="1" alt=""/><br/><p>本文链接：<a href="http://www.cnblogs.com/jxsoft/archive/2012/08/30/2663310.html" target="_blank">http://www.cnblogs.com/jxsoft/archive/2012/08/30/2663310.html</a>，转载请注明。</p>
</content>
</entry>
<entry>
<id>
http://www.cnblogs.com/jxsoft/archive/2012/08/29/2662527.html
</id>
<title type="text">C# exif 信息 - 许明吉博客</title>
<summary type="text">
public void FindExifinfo(string filePath){ Image img = Image.FromFile(filePath); PropertyItem[] pt = img.PropertyItems; for (int i = 0; i < pt.Length; i++) {PropertyItem p = pt[i]; switch (pt[i].Id){ // 设备制造商 20. ...
</summary>
<published>2012-08-29T10:28:00Z</published>
<updated>2012-08-29T10:28:00Z</updated>
<author>
<name>许明吉博客</name>
<uri>http://www.cnblogs.com/jxsoft/</uri>
</author>
<link rel="alternate" href="http://www.cnblogs.com/jxsoft/archive/2012/08/29/2662527.html"/>
<link rel="alternate" type="text/html" href="http://www.cnblogs.com/jxsoft/archive/2012/08/29/2662527.html"/>
<content type="html">
<div style="background-color: #F5F5F5;border: 1px solid #CCCCCC;padding:10px;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> FindExifinfo(<span style="color: #0000ff;">string</span><span style="color: #000000;"> filePath)<br/>{<br/><br/> Image img </span>=<span style="color: #000000;"> Image.FromFile(filePath);<br/><br/> PropertyItem[] pt </span>=<span style="color: #000000;"> img.PropertyItems;<br/><br/> </span><span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = <span style="color: #800080;">0</span>; i &lt; pt.Length; i++<span style="color: #000000;">)<br/><br/> {<br/>PropertyItem p </span>=<span style="color: #000000;"> pt[i]; <br/><br/> </span><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (pt[i].Id)<br/><br/>{ </span><span style="color: #008000;">//</span><span style="color: #008000;"> 设备制造商 20. </span><br/><br/> <span style="color: #0000ff;">case</span> <span style="color: #800080;">0x010F</span><span style="color: #000000;">:<br/><br/> </span><span style="color: #0000ff;">this</span>.textBox1.Text =<span style="color: #000000;"> System.Text.ASCIIEncoding.ASCII.GetString(pt[i].Value);<br/><br/> </span><span style="color: #0000ff;">break</span><span style="color: #000000;">; <br/></span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0x0110</span>: <span style="color: #008000;">//</span><span style="color: #008000;"> 设备型号 25. </span><br/><br/> <span style="color: #0000ff;">this</span>.textBox4.Text =<span style="color: #000000;"> GetValueOfType2(p.Value);<br/><br/> </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/><br/> </span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0x0132</span>: <span style="color: #008000;">//</span><span style="color: #008000;"> 拍照时间 30.</span><br/><br/> <span style="color: #0000ff;">this</span>.textBox2.Text =<span style="color: #000000;"> GetValueOfType2(p.Value);<br/><br/> </span><span style="color: #0000ff;">break</span><span style="color: #000000;">; <br/><br/> </span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0x829A</span>: <span style="color: #008000;">//</span><span style="color: #008000;"> .曝光时间 </span><br/><br/> <span style="color: #0000ff;">this</span>.textBox3.Text = GetValueOfType5(p.Value)+<span style="color: #800000;">"</span><span style="color: #800000;"> sec</span><span style="color: #800000;">"</span><span style="color: #000000;">;<br/><br/> </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/> </span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0x8827</span>: <span style="color: #008000;">//</span><span style="color: #008000;"> ISO 40. </span><br/><br/> <span style="color: #0000ff;">this</span>.textBox5.Text =<span style="color: #000000;"> GetValueOfType3(p.Value);<br/><br/> </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/><br/> </span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0x010E</span>: <span style="color: #008000;">//</span><span style="color: #008000;"> 图像说明info.description</span><br/><br/> <span style="color: #0000ff;">this</span>.textBox6.Text =<span style="color: #000000;"> GetValueOfType2(p.Value);<br/><br/> </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/><br/> </span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0x920a</span>: <span style="color: #008000;">//</span><span style="color: #008000;">相片的焦距</span><br/><br/> <span style="color: #0000ff;">this</span>.textBox7.Text = GetValueOfType5A(p.Value) + <span style="color: #800000;">"</span><span style="color: #800000;"> mm</span><span style="color: #800000;">"</span><span style="color: #000000;">;<br/><br/> </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/> </span><span style="color: #0000ff;">case</span> <span style="color: #800080;">0x829D</span>: <span style="color: #008000;">//</span><span style="color: #008000;">相片的光圈值</span><br/><br/> <span style="color: #0000ff;">this</span>.textBox8.Text =<span style="color: #000000;"> GetValueOfType5A(p.Value);<br/><br/> </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;<br/><br/> </span><span style="color: #0000ff;">default</span><span style="color: #000000;">:<br/><br/> </span><span style="color: #0000ff;">break</span><span style="color: #000000;">; <br/><br/>} <br/><br/> }<br/><br/>}<br/><br/><br/><br /><br/><br/><br/><br /></span><p><span style="background-color: #f5f5f5; font-family: Courier New;">public string GetValueOfType2(byte[] b)// 对type=2 的value值进行读取</span></p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return System.Text.Encoding.ASCII.GetString(b);</span></p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p><p>&nbsp;</p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">private static string GetValueOfType3(byte[] b) //对type=3 的value值进行读取</span></p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (b.Length != 2) return "unknow";</span></p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return Convert.ToUInt16(b[1] &lt;&lt; 8 | b[0]).ToString();</span></p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p><p>&nbsp;</p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static string GetValueOfType5(byte[] b) //对type=5 的value值进行读取</span></p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (b.Length != 8) return "unknow";</span></p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UInt32 fm, fz;</span></p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fm = 0;</span></p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fz = 0;</span></p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fz = Convert.ToUInt32(b[7] &lt;&lt; 24 | b[6] &lt;&lt; 16 | b[5] &lt;&lt; 8 | b[4]);</span></p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fm = Convert.ToUInt32(b[3] &lt;&lt; 24 | b[2] &lt;&lt; 16 | b[1] &lt;&lt; 8 | b[0]);</span></p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return fm.ToString() + "/" + fz.ToString()+" sec";</span></p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p><p>&nbsp;</p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">private static string GetValueOfType5A(byte[] b)//获取光圈的值</span></p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (b.Length != 8) return "unknow";</span></p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UInt32 fm, fz;</span></p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fm = 0;</span></p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fz = 0;</span></p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fz = Convert.ToUInt32(b[7] &lt;&lt; 24 | b[6] &lt;&lt; 16 | b[5] &lt;&lt; 8 | b[4]);</span></p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fm = Convert.ToUInt32(b[3] &lt;&lt; 24 | b[2] &lt;&lt; 16 | b[1] &lt;&lt; 8 | b[0]);</span></p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double temp = (double)fm / fz;</span></p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (temp).ToString();</span></p><p>&nbsp;</p><p><span style="background-color: #f5f5f5; font-family: Courier New;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p></div><p>&nbsp;</p><img src="http://counter.cnblogs.com/blog/rss/2662527" width="1" height="1" alt=""/><br/><p>本文链接：<a href="http://www.cnblogs.com/jxsoft/archive/2012/08/29/2662527.html" target="_blank">http://www.cnblogs.com/jxsoft/archive/2012/08/29/2662527.html</a>，转载请注明。</p>
</content>
</entry>
<entry>
<id>
http://www.cnblogs.com/jxsoft/archive/2012/08/29/2662521.html
</id>
<title type="text">C#读取EXIF信息类 - 许明吉博客</title>
<summary type="text">
[转]C#读取EXIF信息类ExifWorksusing System;using System.Collections.Generic;using System.Text;namespace ExifWorks{// // Utility class for working with EXIF data in images. Provides abstraction// for most common data and generic utilities for work with all other. // // // Copyright (c) Michal A. Valáše
</summary>
<published>2012-08-29T10:21:00Z</published>
<updated>2012-08-29T10:21:00Z</updated>
<author>
<name>许明吉博客</name>
<uri>http://www.cnblogs.com/jxsoft/</uri>
</author>
<link rel="alternate" href="http://www.cnblogs.com/jxsoft/archive/2012/08/29/2662521.html"/>
<link rel="alternate" type="text/html" href="http://www.cnblogs.com/jxsoft/archive/2012/08/29/2662521.html"/>
<content type="html">
<div style="background-color: #F5F5F5;border: 1px solid #CCCCCC;padding:10px;"><span style="color: #000000;">[转]C#读取EXIF信息类<br/>ExifWorks<br/></span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System;<br/></span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Collections.Generic;<br/></span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Text;<br/><br/></span><span style="color: #0000ff;">namespace</span><span style="color: #000000;"> ExifWorks<br/>{<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Utility class for working with EXIF data in images. Provides abstraction<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> for most common data and generic utilities for work with all other. <br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Copyright (c) Michal A. Val&aacute;&scaron;ek - Altair Communications, 2003-2005<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> Copmany: </span><span style="color: #008000; text-decoration: underline;">http://software.altaircom.net</span><span style="color: #008000;">, E-mail: support@altaircom.net<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> Private: </span><span style="color: #008000; text-decoration: underline;">http://www.rider.cz</span><span style="color: #008000;">, E-mail: rider@rider.cz<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> This is free software licensed under GNU Lesser General Public License<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 12.06.2004 Added capability to write EXIF data<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 11.07.2004 Added option to change encoding<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 04.09.2005 Changed source of Width and Height properties from EXIF to image<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 05.09.2005 Code clean-up and minor changes<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> [marco.ridoni@virgilio.it] 02-11-2006 C# translation<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> ExifManager : IDisposable<br/>{<br/><br/></span><span style="color: #0000ff;">private</span><span style="color: #000000;"> System.Drawing.Bitmap _Image;<br/></span><span style="color: #0000ff;">private</span> System.Text.Encoding _Encoding =<span style="color: #000000;"> System.Text.Encoding.UTF8;<br/><br/>Type declarations</span><span style="color: #0000ff;">#region</span> Type declarations<br/><br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Contains possible values of EXIF tag names (ID)<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> See GdiPlusImaging.h<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">enum</span> TagNames : <span style="color: #0000ff;">int</span><span style="color: #000000;"><br/>{<br/>ExifIFD </span>= <span style="color: #800080;">0x8769</span><span style="color: #000000;">,<br/>GpsIFD </span>= <span style="color: #800080;">0x8825</span><span style="color: #000000;">,<br/>NewSubfileType </span>= <span style="color: #800080;">0xFE</span><span style="color: #000000;">,<br/>SubfileType </span>= <span style="color: #800080;">0xFF</span><span style="color: #000000;">,<br/>ImageWidth </span>= <span style="color: #800080;">0x100</span><span style="color: #000000;">,<br/>ImageHeight </span>= <span style="color: #800080;">0x101</span><span style="color: #000000;">,<br/>BitsPerSample </span>= <span style="color: #800080;">0x102</span><span style="color: #000000;">,<br/>Compression </span>= <span style="color: #800080;">0x103</span><span style="color: #000000;">,<br/>PhotometricInterp </span>= <span style="color: #800080;">0x106</span><span style="color: #000000;">,<br/>ThreshHolding </span>= <span style="color: #800080;">0x107</span><span style="color: #000000;">,<br/>CellWidth </span>= <span style="color: #800080;">0x108</span><span style="color: #000000;">,<br/>CellHeight </span>= <span style="color: #800080;">0x109</span><span style="color: #000000;">,<br/>FillOrder </span>= <span style="color: #800080;">0x10A</span><span style="color: #000000;">,<br/>DocumentName </span>= <span style="color: #800080;">0x10D</span><span style="color: #000000;">,<br/>ImageDescription </span>= <span style="color: #800080;">0x10E</span><span style="color: #000000;">,<br/>EquipMake </span>= <span style="color: #800080;">0x10F</span><span style="color: #000000;">,<br/>EquipModel </span>= <span style="color: #800080;">0x110</span><span style="color: #000000;">,<br/>StripOffsets </span>= <span style="color: #800080;">0x111</span><span style="color: #000000;">,<br/>Orientation </span>= <span style="color: #800080;">0x112</span><span style="color: #000000;">,<br/>SamplesPerPixel </span>= <span style="color: #800080;">0x115</span><span style="color: #000000;">,<br/>RowsPerStrip </span>= <span style="color: #800080;">0x116</span><span style="color: #000000;">,<br/>StripBytesCount </span>= <span style="color: #800080;">0x117</span><span style="color: #000000;">,<br/>MinSampleValue </span>= <span style="color: #800080;">0x118</span><span style="color: #000000;">,<br/>MaxSampleValue </span>= <span style="color: #800080;">0x119</span><span style="color: #000000;">,<br/>XResolution </span>= <span style="color: #800080;">0x11A</span><span style="color: #000000;">,<br/>YResolution </span>= <span style="color: #800080;">0x11B</span><span style="color: #000000;">,<br/>PlanarConfig </span>= <span style="color: #800080;">0x11C</span><span style="color: #000000;">,<br/>PageName </span>= <span style="color: #800080;">0x11D</span><span style="color: #000000;">,<br/>XPosition </span>= <span style="color: #800080;">0x11E</span><span style="color: #000000;">,<br/>YPosition </span>= <span style="color: #800080;">0x11F</span><span style="color: #000000;">,<br/>FreeOffset </span>= <span style="color: #800080;">0x120</span><span style="color: #000000;">,<br/>FreeByteCounts </span>= <span style="color: #800080;">0x121</span><span style="color: #000000;">,<br/>GrayResponseUnit </span>= <span style="color: #800080;">0x122</span><span style="color: #000000;">,<br/>GrayResponseCurve </span>= <span style="color: #800080;">0x123</span><span style="color: #000000;">,<br/>T4Option </span>= <span style="color: #800080;">0x124</span><span style="color: #000000;">,<br/>T6Option </span>= <span style="color: #800080;">0x125</span><span style="color: #000000;">,<br/>ResolutionUnit </span>= <span style="color: #800080;">0x128</span><span style="color: #000000;">,<br/>PageNumber </span>= <span style="color: #800080;">0x129</span><span style="color: #000000;">,<br/>TransferFuncition </span>= <span style="color: #800080;">0x12D</span><span style="color: #000000;">,<br/>SoftwareUsed </span>= <span style="color: #800080;">0x131</span><span style="color: #000000;">,<br/>DateTime </span>= <span style="color: #800080;">0x132</span><span style="color: #000000;">,<br/>Artist </span>= <span style="color: #800080;">0x13B</span><span style="color: #000000;">,<br/>HostComputer </span>= <span style="color: #800080;">0x13C</span><span style="color: #000000;">,<br/>Predictor </span>= <span style="color: #800080;">0x13D</span><span style="color: #000000;">,<br/>WhitePoint </span>= <span style="color: #800080;">0x13E</span><span style="color: #000000;">,<br/>PrimaryChromaticities </span>= <span style="color: #800080;">0x13F</span><span style="color: #000000;">,<br/>ColorMap </span>= <span style="color: #800080;">0x140</span><span style="color: #000000;">,<br/>HalftoneHints </span>= <span style="color: #800080;">0x141</span><span style="color: #000000;">,<br/>TileWidth </span>= <span style="color: #800080;">0x142</span><span style="color: #000000;">,<br/>TileLength </span>= <span style="color: #800080;">0x143</span><span style="color: #000000;">,<br/>TileOffset </span>= <span style="color: #800080;">0x144</span><span style="color: #000000;">,<br/>TileByteCounts </span>= <span style="color: #800080;">0x145</span><span style="color: #000000;">,<br/>InkSet </span>= <span style="color: #800080;">0x14C</span><span style="color: #000000;">,<br/>InkNames </span>= <span style="color: #800080;">0x14D</span><span style="color: #000000;">,<br/>NumberOfInks </span>= <span style="color: #800080;">0x14E</span><span style="color: #000000;">,<br/>DotRange </span>= <span style="color: #800080;">0x150</span><span style="color: #000000;">,<br/>TargetPrinter </span>= <span style="color: #800080;">0x151</span><span style="color: #000000;">,<br/>ExtraSamples </span>= <span style="color: #800080;">0x152</span><span style="color: #000000;">,<br/>SampleFormat </span>= <span style="color: #800080;">0x153</span><span style="color: #000000;">,<br/>SMinSampleValue </span>= <span style="color: #800080;">0x154</span><span style="color: #000000;">,<br/>SMaxSampleValue </span>= <span style="color: #800080;">0x155</span><span style="color: #000000;">,<br/>TransferRange </span>= <span style="color: #800080;">0x156</span><span style="color: #000000;">,<br/>JPEGProc </span>= <span style="color: #800080;">0x200</span><span style="color: #000000;">,<br/>JPEGInterFormat </span>= <span style="color: #800080;">0x201</span><span style="color: #000000;">,<br/>JPEGInterLength </span>= <span style="color: #800080;">0x202</span><span style="color: #000000;">,<br/>JPEGRestartInterval </span>= <span style="color: #800080;">0x203</span><span style="color: #000000;">,<br/>JPEGLosslessPredictors </span>= <span style="color: #800080;">0x205</span><span style="color: #000000;">,<br/>JPEGPointTransforms </span>= <span style="color: #800080;">0x206</span><span style="color: #000000;">,<br/>JPEGQTables </span>= <span style="color: #800080;">0x207</span><span style="color: #000000;">,<br/>JPEGDCTables </span>= <span style="color: #800080;">0x208</span><span style="color: #000000;">,<br/>JPEGACTables </span>= <span style="color: #800080;">0x209</span><span style="color: #000000;">,<br/>YCbCrCoefficients </span>= <span style="color: #800080;">0x211</span><span style="color: #000000;">,<br/>YCbCrSubsampling </span>= <span style="color: #800080;">0x212</span><span style="color: #000000;">,<br/>YCbCrPositioning </span>= <span style="color: #800080;">0x213</span><span style="color: #000000;">,<br/>REFBlackWhite </span>= <span style="color: #800080;">0x214</span><span style="color: #000000;">,<br/>ICCProfile </span>= <span style="color: #800080;">0x8773</span><span style="color: #000000;">,<br/>Gamma </span>= <span style="color: #800080;">0x301</span><span style="color: #000000;">,<br/>ICCProfileDescriptor </span>= <span style="color: #800080;">0x302</span><span style="color: #000000;">,<br/>SRGBRenderingIntent </span>= <span style="color: #800080;">0x303</span><span style="color: #000000;">,<br/>ImageTitle </span>= <span style="color: #800080;">0x320</span><span style="color: #000000;">,<br/>Copyright </span>= <span style="color: #800080;">0x8298</span><span style="color: #000000;">,<br/>ResolutionXUnit </span>= <span style="color: #800080;">0x5001</span><span style="color: #000000;">,<br/>ResolutionYUnit </span>= <span style="color: #800080;">0x5002</span><span style="color: #000000;">,<br/>ResolutionXLengthUnit </span>= <span style="color: #800080;">0x5003</span><span style="color: #000000;">,<br/>ResolutionYLengthUnit </span>= <span style="color: #800080;">0x5004</span><span style="color: #000000;">,<br/>PrintFlags </span>= <span style="color: #800080;">0x5005</span><span style="color: #000000;">,<br/>PrintFlagsVersion </span>= <span style="color: #800080;">0x5006</span><span style="color: #000000;">,<br/>PrintFlagsCrop </span>= <span style="color: #800080;">0x5007</span><span style="color: #000000;">,<br/>PrintFlagsBleedWidth </span>= <span style="color: #800080;">0x5008</span><span style="color: #000000;">,<br/>PrintFlagsBleedWidthScale </span>= <span style="color: #800080;">0x5009</span><span style="color: #000000;">,<br/>HalftoneLPI </span>= <span style="color: #800080;">0x500A</span><span style="color: #000000;">,<br/>HalftoneLPIUnit </span>= <span style="color: #800080;">0x500B</span><span style="color: #000000;">,<br/>HalftoneDegree </span>= <span style="color: #800080;">0x500C</span><span style="color: #000000;">,<br/>HalftoneShape </span>= <span style="color: #800080;">0x500D</span><span style="color: #000000;">,<br/>HalftoneMisc </span>= <span style="color: #800080;">0x500E</span><span style="color: #000000;">,<br/>HalftoneScreen </span>= <span style="color: #800080;">0x500F</span><span style="color: #000000;">,<br/>JPEGQuality </span>= <span style="color: #800080;">0x5010</span><span style="color: #000000;">,<br/>GridSize </span>= <span style="color: #800080;">0x5011</span><span style="color: #000000;">,<br/>ThumbnailFormat </span>= <span style="color: #800080;">0x5012</span><span style="color: #000000;">,<br/>ThumbnailWidth </span>= <span style="color: #800080;">0x5013</span><span style="color: #000000;">,<br/>ThumbnailHeight </span>= <span style="color: #800080;">0x5014</span><span style="color: #000000;">,<br/>ThumbnailColorDepth </span>= <span style="color: #800080;">0x5015</span><span style="color: #000000;">,<br/>ThumbnailPlanes </span>= <span style="color: #800080;">0x5016</span><span style="color: #000000;">,<br/>ThumbnailRawBytes </span>= <span style="color: #800080;">0x5017</span><span style="color: #000000;">,<br/>ThumbnailSize </span>= <span style="color: #800080;">0x5018</span><span style="color: #000000;">,<br/>ThumbnailCompressedSize </span>= <span style="color: #800080;">0x5019</span><span style="color: #000000;">,<br/>ColorTransferFunction </span>= <span style="color: #800080;">0x501A</span><span style="color: #000000;">,<br/>ThumbnailData </span>= <span style="color: #800080;">0x501B</span><span style="color: #000000;">,<br/>ThumbnailImageWidth </span>= <span style="color: #800080;">0x5020</span><span style="color: #000000;">,<br/>ThumbnailImageHeight </span>= <span style="color: #800080;">0x502</span><span style="color: #000000;">,<br/>ThumbnailBitsPerSample </span>= <span style="color: #800080;">0x5022</span><span style="color: #000000;">,<br/>ThumbnailCompression </span>= <span style="color: #800080;">0x5023</span><span style="color: #000000;">,<br/>ThumbnailPhotometricInterp </span>= <span style="color: #800080;">0x5024</span><span style="color: #000000;">,<br/>ThumbnailImageDescription </span>= <span style="color: #800080;">0x5025</span><span style="color: #000000;">,<br/>ThumbnailEquipMake </span>= <span style="color: #800080;">0x5026</span><span style="color: #000000;">,<br/>ThumbnailEquipModel </span>= <span style="color: #800080;">0x5027</span><span style="color: #000000;">,<br/>ThumbnailStripOffsets </span>= <span style="color: #800080;">0x5028</span><span style="color: #000000;">,<br/>ThumbnailOrientation </span>= <span style="color: #800080;">0x5029</span><span style="color: #000000;">,<br/>ThumbnailSamplesPerPixel </span>= <span style="color: #800080;">0x502A</span><span style="color: #000000;">,<br/>ThumbnailRowsPerStrip </span>= <span style="color: #800080;">0x502B</span><span style="color: #000000;">,<br/>ThumbnailStripBytesCount </span>= <span style="color: #800080;">0x502C</span><span style="color: #000000;">,<br/>ThumbnailResolutionX </span>= <span style="color: #800080;">0x502D</span><span style="color: #000000;">,<br/>ThumbnailResolutionY </span>= <span style="color: #800080;">0x502E</span><span style="color: #000000;">,<br/>ThumbnailPlanarConfig </span>= <span style="color: #800080;">0x502F</span><span style="color: #000000;">,<br/>ThumbnailResolutionUnit </span>= <span style="color: #800080;">0x5030</span><span style="color: #000000;">,<br/>ThumbnailTransferFunction </span>= <span style="color: #800080;">0x5031</span><span style="color: #000000;">,<br/>ThumbnailSoftwareUsed </span>= <span style="color: #800080;">0x5032</span><span style="color: #000000;">,<br/>ThumbnailDateTime </span>= <span style="color: #800080;">0x5033</span><span style="color: #000000;">,<br/>ThumbnailArtist </span>= <span style="color: #800080;">0x5034</span><span style="color: #000000;">,<br/>ThumbnailWhitePoint </span>= <span style="color: #800080;">0x5035</span><span style="color: #000000;">,<br/>ThumbnailPrimaryChromaticities </span>= <span style="color: #800080;">0x5036</span><span style="color: #000000;">,<br/>ThumbnailYCbCrCoefficients </span>= <span style="color: #800080;">0x5037</span><span style="color: #000000;">,<br/>ThumbnailYCbCrSubsampling </span>= <span style="color: #800080;">0x5038</span><span style="color: #000000;">,<br/>ThumbnailYCbCrPositioning </span>= <span style="color: #800080;">0x5039</span><span style="color: #000000;">,<br/>ThumbnailRefBlackWhite </span>= <span style="color: #800080;">0x503A</span><span style="color: #000000;">,<br/>ThumbnailCopyRight </span>= <span style="color: #800080;">0x503B</span><span style="color: #000000;">,<br/>LuminanceTable </span>= <span style="color: #800080;">0x5090</span><span style="color: #000000;">,<br/>ChrominanceTable </span>= <span style="color: #800080;">0x5091</span><span style="color: #000000;">,<br/>FrameDelay </span>= <span style="color: #800080;">0x5100</span><span style="color: #000000;">,<br/>LoopCount </span>= <span style="color: #800080;">0x5101</span><span style="color: #000000;">,<br/>PixelUnit </span>= <span style="color: #800080;">0x5110</span><span style="color: #000000;">,<br/>PixelPerUnitX </span>= <span style="color: #800080;">0x5111</span><span style="color: #000000;">,<br/>PixelPerUnitY </span>= <span style="color: #800080;">0x5112</span><span style="color: #000000;">,<br/>PaletteHistogram </span>= <span style="color: #800080;">0x5113</span><span style="color: #000000;">,<br/>ExifExposureTime </span>= <span style="color: #800080;">0x829A</span><span style="color: #000000;">,<br/>ExifFNumber </span>= <span style="color: #800080;">0x829D</span><span style="color: #000000;">,<br/>ExifExposureProg </span>= <span style="color: #800080;">0x8822</span><span style="color: #000000;">,<br/>ExifSpectralSense </span>= <span style="color: #800080;">0x8824</span><span style="color: #000000;">,<br/>ExifISOSpeed </span>= <span style="color: #800080;">0x8827</span><span style="color: #000000;">,<br/>ExifOECF </span>= <span style="color: #800080;">0x8828</span><span style="color: #000000;">,<br/>ExifVer </span>= <span style="color: #800080;">0x9000</span><span style="color: #000000;">,<br/>ExifDTOrig </span>= <span style="color: #800080;">0x9003</span><span style="color: #000000;">,<br/>ExifDTDigitized </span>= <span style="color: #800080;">0x9004</span><span style="color: #000000;">,<br/>ExifCompConfig </span>= <span style="color: #800080;">0x9101</span><span style="color: #000000;">,<br/>ExifCompBPP </span>= <span style="color: #800080;">0x9102</span><span style="color: #000000;">,<br/>ExifShutterSpeed </span>= <span style="color: #800080;">0x9201</span><span style="color: #000000;">,<br/>ExifAperture </span>= <span style="color: #800080;">0x9202</span><span style="color: #000000;">,<br/>ExifBrightness </span>= <span style="color: #800080;">0x9203</span><span style="color: #000000;">,<br/>ExifExposureBias </span>= <span style="color: #800080;">0x9204</span><span style="color: #000000;">,<br/>ExifMaxAperture </span>= <span style="color: #800080;">0x9205</span><span style="color: #000000;">,<br/>ExifSubjectDist </span>= <span style="color: #800080;">0x9206</span><span style="color: #000000;">,<br/>ExifMeteringMode </span>= <span style="color: #800080;">0x9207</span><span style="color: #000000;">,<br/>ExifLightSource </span>= <span style="color: #800080;">0x9208</span><span style="color: #000000;">,<br/>ExifFlash </span>= <span style="color: #800080;">0x9209</span><span style="color: #000000;">,<br/>ExifFocalLength </span>= <span style="color: #800080;">0x920A</span><span style="color: #000000;">,<br/>ExifMakerNote </span>= <span style="color: #800080;">0x927C</span><span style="color: #000000;">,<br/>ExifUserComment </span>= <span style="color: #800080;">0x9286</span><span style="color: #000000;">,<br/>ExifDTSubsec </span>= <span style="color: #800080;">0x9290</span><span style="color: #000000;">,<br/>ExifDTOrigSS </span>= <span style="color: #800080;">0x9291</span><span style="color: #000000;">,<br/>ExifDTDigSS </span>= <span style="color: #800080;">0x9292</span><span style="color: #000000;">,<br/>ExifFPXVer </span>= <span style="color: #800080;">0xA000</span><span style="color: #000000;">,<br/>ExifColorSpace </span>= <span style="color: #800080;">0xA001</span><span style="color: #000000;">,<br/>ExifPixXDim </span>= <span style="color: #800080;">0xA002</span><span style="color: #000000;">,<br/>ExifPixYDim </span>= <span style="color: #800080;">0xA003</span><span style="color: #000000;">,<br/>ExifRelatedWav </span>= <span style="color: #800080;">0xA004</span><span style="color: #000000;">,<br/>ExifInterop </span>= <span style="color: #800080;">0xA005</span><span style="color: #000000;">,<br/>ExifFlashEnergy </span>= <span style="color: #800080;">0xA20B</span><span style="color: #000000;">,<br/>ExifSpatialFR </span>= <span style="color: #800080;">0xA20C</span><span style="color: #000000;">,<br/>ExifFocalXRes </span>= <span style="color: #800080;">0xA20E</span><span style="color: #000000;">,<br/>ExifFocalYRes </span>= <span style="color: #800080;">0xA20F</span><span style="color: #000000;">,<br/>ExifFocalResUnit </span>= <span style="color: #800080;">0xA210</span><span style="color: #000000;">,<br/>ExifSubjectLoc </span>= <span style="color: #800080;">0xA214</span><span style="color: #000000;">,<br/>ExifExposureIndex </span>= <span style="color: #800080;">0xA215</span><span style="color: #000000;">,<br/>ExifSensingMethod </span>= <span style="color: #800080;">0xA217</span><span style="color: #000000;">,<br/>ExifFileSource </span>= <span style="color: #800080;">0xA300</span><span style="color: #000000;">,<br/>ExifSceneType </span>= <span style="color: #800080;">0xA301</span><span style="color: #000000;">,<br/>ExifCfaPattern </span>= <span style="color: #800080;">0xA302</span><span style="color: #000000;">,<br/>GpsVer </span>= <span style="color: #800080;">0x0</span><span style="color: #000000;">,<br/>GpsLatitudeRef </span>= <span style="color: #800080;">0x1</span><span style="color: #000000;">,<br/>GpsLatitude </span>= <span style="color: #800080;">0x2</span><span style="color: #000000;">,<br/>GpsLongitudeRef </span>= <span style="color: #800080;">0x3</span><span style="color: #000000;">,<br/>GpsLongitude </span>= <span style="color: #800080;">0x4</span><span style="color: #000000;">,<br/>GpsAltitudeRef </span>= <span style="color: #800080;">0x5</span><span style="color: #000000;">,<br/>GpsAltitude </span>= <span style="color: #800080;">0x6</span><span style="color: #000000;">,<br/>GpsGpsTime </span>= <span style="color: #800080;">0x7</span><span style="color: #000000;">,<br/>GpsGpsSatellites </span>= <span style="color: #800080;">0x8</span><span style="color: #000000;">,<br/>GpsGpsStatus </span>= <span style="color: #800080;">0x9</span><span style="color: #000000;">,<br/>GpsGpsMeasureMode </span>= <span style="color: #800080;">0xA</span><span style="color: #000000;">,<br/>GpsGpsDop </span>= <span style="color: #800080;">0xB</span><span style="color: #000000;">,<br/>GpsSpeedRef </span>= <span style="color: #800080;">0xC</span><span style="color: #000000;">,<br/>GpsSpeed </span>= <span style="color: #800080;">0xD</span><span style="color: #000000;">,<br/>GpsTrackRef </span>= <span style="color: #800080;">0xE</span><span style="color: #000000;">,<br/>GpsTrack </span>= <span style="color: #800080;">0xF</span><span style="color: #000000;">,<br/>GpsImgDirRef </span>= <span style="color: #800080;">0x10</span><span style="color: #000000;">,<br/>GpsImgDir </span>= <span style="color: #800080;">0x11</span><span style="color: #000000;">,<br/>GpsMapDatum </span>= <span style="color: #800080;">0x12</span><span style="color: #000000;">,<br/>GpsDestLatRef </span>= <span style="color: #800080;">0x13</span><span style="color: #000000;">,<br/>GpsDestLat </span>= <span style="color: #800080;">0x14</span><span style="color: #000000;">,<br/>GpsDestLongRef </span>= <span style="color: #800080;">0x15</span><span style="color: #000000;">,<br/>GpsDestLong </span>= <span style="color: #800080;">0x16</span><span style="color: #000000;">,<br/>GpsDestBearRef </span>= <span style="color: #800080;">0x17</span><span style="color: #000000;">,<br/>GpsDestBear </span>= <span style="color: #800080;">0x18</span><span style="color: #000000;">,<br/>GpsDestDistRef </span>= <span style="color: #800080;">0x19</span><span style="color: #000000;">,<br/>GpsDestDist </span>= <span style="color: #800080;">0x1A</span><span style="color: #000000;"><br/>}<br/><br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Real position of 0th row and column of picture<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">enum</span><span style="color: #000000;"> Orientations<br/>{<br/>TopLeft </span>= <span style="color: #800080;">1</span><span style="color: #000000;">,<br/>TopRight </span>= <span style="color: #800080;">2</span><span style="color: #000000;">,<br/>BottomRight </span>= <span style="color: #800080;">3</span><span style="color: #000000;">,<br/>BottomLeft </span>= <span style="color: #800080;">4</span><span style="color: #000000;">,<br/>LeftTop </span>= <span style="color: #800080;">5</span><span style="color: #000000;">,<br/>RightTop </span>= <span style="color: #800080;">6</span><span style="color: #000000;">,<br/>RightBottom </span>= <span style="color: #800080;">7</span><span style="color: #000000;">,<br/>LftBottom </span>= <span style="color: #800080;">8</span><span style="color: #000000;"><br/>}<br/><br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Exposure programs<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">enum</span><span style="color: #000000;"> ExposurePrograms<br/>{<br/>Manual </span>= <span style="color: #800080;">1</span><span style="color: #000000;">,<br/>Normal </span>= <span style="color: #800080;">2</span><span style="color: #000000;">,<br/>AperturePriority </span>= <span style="color: #800080;">3</span><span style="color: #000000;">,<br/>ShutterPriority </span>= <span style="color: #800080;">4</span><span style="color: #000000;">,<br/>Creative </span>= <span style="color: #800080;">5</span><span style="color: #000000;">,<br/>Action </span>= <span style="color: #800080;">6</span><span style="color: #000000;">,<br/>Portrait </span>= <span style="color: #800080;">7</span><span style="color: #000000;">,<br/>Landscape </span>= <span style="color: #800080;">8</span><span style="color: #000000;">,<br/>}<br/><br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Exposure metering modes<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">enum</span><span style="color: #000000;"> ExposureMeteringModes<br/>{<br/>Unknown </span>= <span style="color: #800080;">0</span><span style="color: #000000;">,<br/>Average </span>= <span style="color: #800080;">1</span><span style="color: #000000;">,<br/>CenterWeightedAverage </span>= <span style="color: #800080;">2</span><span style="color: #000000;">,<br/>Spot </span>= <span style="color: #800080;">3</span><span style="color: #000000;">,<br/>MultiSpot </span>= <span style="color: #800080;">4</span><span style="color: #000000;">,<br/>MultiSegment </span>= <span style="color: #800080;">5</span><span style="color: #000000;">,<br/>Partial </span>= <span style="color: #800080;">6</span><span style="color: #000000;">,<br/>Other </span>= <span style="color: #800080;">255</span><span style="color: #000000;"><br/>}<br/><br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Flash activity modes<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">enum</span><span style="color: #000000;"> FlashModes<br/>{<br/>NotFired </span>= <span style="color: #800080;">0</span><span style="color: #000000;">,<br/>Fired </span>= <span style="color: #800080;">1</span><span style="color: #000000;">,<br/>FiredButNoStrobeReturned </span>= <span style="color: #800080;">5</span><span style="color: #000000;">,<br/>FiredAndStrobeReturned </span>= <span style="color: #800080;">7</span><span style="color: #000000;">,<br/>}<br/><br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Possible light sources (white balance)<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">enum</span><span style="color: #000000;"> LightSources<br/>{<br/>Unknown </span>= <span style="color: #800080;">0</span><span style="color: #000000;">,<br/>Daylight </span>= <span style="color: #800080;">1</span><span style="color: #000000;">,<br/>Fluorescent </span>= <span style="color: #800080;">2</span><span style="color: #000000;">,<br/>Tungsten </span>= <span style="color: #800080;">3</span><span style="color: #000000;">,<br/>Flash </span>= <span style="color: #800080;">10</span><span style="color: #000000;">,<br/>StandardLightA </span>= <span style="color: #800080;">17</span><span style="color: #000000;">,<br/>StandardLightB </span>= <span style="color: #800080;">18</span><span style="color: #000000;">,<br/>StandardLightC </span>= <span style="color: #800080;">19</span><span style="color: #000000;">,<br/>D55 </span>= <span style="color: #800080;">20</span><span style="color: #000000;">,<br/>D65 </span>= <span style="color: #800080;">21</span><span style="color: #000000;">,<br/>D75 </span>= <span style="color: #800080;">22</span><span style="color: #000000;">,<br/>Other </span>= <span style="color: #800080;">255</span><span style="color: #000000;"><br/>}<br/><br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> EXIF data types<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 12.6.2004 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">enum</span> ExifDataTypes : <span style="color: #0000ff;">short</span><span style="color: #000000;"><br/>{<br/>UnsignedByte </span>= <span style="color: #800080;">1</span><span style="color: #000000;">,<br/>AsciiString </span>= <span style="color: #800080;">2</span><span style="color: #000000;">,<br/>UnsignedShort </span>= <span style="color: #800080;">3</span><span style="color: #000000;">,<br/>UnsignedLong </span>= <span style="color: #800080;">4</span><span style="color: #000000;">,<br/>UnsignedRational </span>= <span style="color: #800080;">5</span><span style="color: #000000;">,<br/>SignedByte </span>= <span style="color: #800080;">6</span><span style="color: #000000;">,<br/>Undefined </span>= <span style="color: #800080;">7</span><span style="color: #000000;">,<br/>SignedShort </span>= <span style="color: #800080;">8</span><span style="color: #000000;">,<br/>SignedLong </span>= <span style="color: #800080;">9</span><span style="color: #000000;">,<br/>SignedRational </span>= <span style="color: #800080;">10</span><span style="color: #000000;">,<br/>SingleFloat </span>= <span style="color: #800080;">11</span><span style="color: #000000;">,<br/>DoubleFloat </span>= <span style="color: #800080;">12</span><span style="color: #000000;"><br/>}<br/><br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Represents rational which is type of some Exif properties<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">struct</span><span style="color: #000000;"> Rational<br/>{<br/></span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Int32 Numerator;<br/></span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Int32 Denominator;<br/><br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Converts rational to string representation<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Optional, default "/". String to be used as delimiter of components.<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> String representation of the rational.<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> ToString()<br/>{<br/></span><span style="color: #0000ff;">return</span> ToString(<span style="color: #800000;">"</span><span style="color: #800000;">/</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/>}<br/><br/></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> ToString(<span style="color: #0000ff;">string</span><span style="color: #000000;"> Delimiter)<br/>{<br/></span><span style="color: #0000ff;">return</span> Numerator + <span style="color: #800000;">"</span><span style="color: #800000;">/</span><span style="color: #800000;">"</span> +<span style="color: #000000;"> Denominator;<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Converts rational to double precision real number<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> The rational as double precision real number.<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">double</span><span style="color: #000000;"> ToDouble()<br/>{<br/></span><span style="color: #0000ff;">return</span> (<span style="color: #0000ff;">double</span>)Numerator /<span style="color: #000000;"> Denominator;<br/>}<br/>}<br/><br/></span><span style="color: #0000ff;">#endregion</span><br/><br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Initializes new instance of this class.<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Bitmap to read exif information from<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span><span style="color: #000000;"> ExifManager(System.Drawing.Bitmap Bitmap)<br/>{<br/></span><span style="color: #0000ff;">if</span> (Bitmap == <span style="color: #0000ff;">null</span><span style="color: #000000;">)<br/></span><span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span> ArgumentNullException(<span style="color: #800000;">"</span><span style="color: #800000;">Bitmap</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/></span><span style="color: #0000ff;">this</span>._Image =<span style="color: #000000;"> Bitmap;<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Initializes new instance of this class.<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Name of file to be loaded<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 13.06.2004 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> ExifManager(<span style="color: #0000ff;">string</span><span style="color: #000000;"> FileName)<br/>{<br/></span><span style="color: #0000ff;">this</span>._Image =<span style="color: #000000;"> (System.Drawing.Bitmap)System.Drawing.Bitmap.FromFile(FileName);<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Get or set encoding used for string metadata<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Encoding used for string metadata<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> Default encoding is UTF-8<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 11.07.2004 Created<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 05.09.2005 Changed from shared to instance member<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span><span style="color: #000000;"> System.Text.Encoding Encoding<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span><span style="color: #000000;">._Encoding;<br/>}<br/></span><span style="color: #0000ff;">set</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">if</span> (value == <span style="color: #0000ff;">null</span><span style="color: #000000;">)<br/></span><span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> ArgumentNullException();<br/></span><span style="color: #0000ff;">this</span>._Encoding =<span style="color: #000000;"> value;<br/>}<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Returns copy of bitmap this instance is working on<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 13.06.2004 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span><span style="color: #000000;"> System.Drawing.Bitmap GetBitmap()<br/>{<br/></span><span style="color: #0000ff;">return</span> (System.Drawing.Bitmap)<span style="color: #0000ff;">this</span><span style="color: #000000;">._Image.Clone();<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Returns all available data in formatted string form<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> ToString()<br/>{<br/>System.Text.StringBuilder SB </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> StringBuilder();<br/><br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">Image:</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">\n\tDimensions: </span><span style="color: #800000;">"</span> + <span style="color: #0000ff;">this</span>.Width + <span style="color: #800000;">"</span><span style="color: #800000;"> x </span><span style="color: #800000;">"</span> + <span style="color: #0000ff;">this</span>.Height + <span style="color: #800000;">"</span><span style="color: #800000;"> px</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">\n\tResolution: </span><span style="color: #800000;">"</span> + <span style="color: #0000ff;">this</span>.ResolutionX + <span style="color: #800000;">"</span><span style="color: #800000;"> x </span><span style="color: #800000;">"</span> + <span style="color: #0000ff;">this</span>.ResolutionY + <span style="color: #800000;">"</span><span style="color: #800000;"> dpi</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">\n\tOrientation: </span><span style="color: #800000;">"</span> + Enum.GetName(<span style="color: #0000ff;">typeof</span>(Orientations), <span style="color: #0000ff;">this</span><span style="color: #000000;">.Orientation));<br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">\n\tTitle: </span><span style="color: #800000;">"</span> + <span style="color: #0000ff;">this</span><span style="color: #000000;">.Title);<br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">\n\tDescription: </span><span style="color: #800000;">"</span> + <span style="color: #0000ff;">this</span><span style="color: #000000;">.Description);<br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">\n\tCopyright: </span><span style="color: #800000;">"</span> + <span style="color: #0000ff;">this</span><span style="color: #000000;">.Copyright);<br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">\nEquipment:</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">\n\tMaker: </span><span style="color: #800000;">"</span> + <span style="color: #0000ff;">this</span><span style="color: #000000;">.EquipmentMaker);<br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">\n\tModel: </span><span style="color: #800000;">"</span> + <span style="color: #0000ff;">this</span><span style="color: #000000;">.EquipmentModel);<br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">\n\tSoftware: </span><span style="color: #800000;">"</span> + <span style="color: #0000ff;">this</span><span style="color: #000000;">.Software);<br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">\nDate and time:</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">\n\tGeneral: </span><span style="color: #800000;">"</span> + <span style="color: #0000ff;">this</span><span style="color: #000000;">.DateTimeLastModified.ToString());<br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">\n\tOriginal: </span><span style="color: #800000;">"</span> + <span style="color: #0000ff;">this</span><span style="color: #000000;">.DateTimeOriginal.ToString());<br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">\n\tDigitized: </span><span style="color: #800000;">"</span> + <span style="color: #0000ff;">this</span><span style="color: #000000;">.DateTimeDigitized.ToString());<br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">\nShooting conditions:</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">\n\tExposure time: </span><span style="color: #800000;">"</span> + <span style="color: #0000ff;">this</span>.ExposureTime.ToString(<span style="color: #800000;">"</span><span style="color: #800000;">N4</span><span style="color: #800000;">"</span>) + <span style="color: #800000;">"</span><span style="color: #800000;"> s</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">\n\tExposure program: </span><span style="color: #800000;">"</span> + Enum.GetName(<span style="color: #0000ff;">typeof</span>(ExposurePrograms), <span style="color: #0000ff;">this</span><span style="color: #000000;">.ExposureProgram));<br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">\n\tExposure mode: </span><span style="color: #800000;">"</span> + Enum.GetName(<span style="color: #0000ff;">typeof</span>(ExposureMeteringModes), <span style="color: #0000ff;">this</span><span style="color: #000000;">.ExposureMeteringMode));<br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">\n\tAperture: F</span><span style="color: #800000;">"</span> + <span style="color: #0000ff;">this</span>.Aperture.ToString(<span style="color: #800000;">"</span><span style="color: #800000;">N2</span><span style="color: #800000;">"</span><span style="color: #000000;">));<br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">\n\tISO sensitivity: </span><span style="color: #800000;">"</span> + <span style="color: #0000ff;">this</span><span style="color: #000000;">.ISO);<br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">\n\tSubject distance: </span><span style="color: #800000;">"</span> + <span style="color: #0000ff;">this</span>.SubjectDistance.ToString(<span style="color: #800000;">"</span><span style="color: #800000;">N2</span><span style="color: #800000;">"</span>) + <span style="color: #800000;">"</span><span style="color: #800000;"> m</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">\n\tFocal length: </span><span style="color: #800000;">"</span> + <span style="color: #0000ff;">this</span><span style="color: #000000;">.FocalLength);<br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">\n\tFlash: </span><span style="color: #800000;">"</span> + Enum.GetName(<span style="color: #0000ff;">typeof</span>(FlashModes), <span style="color: #0000ff;">this</span><span style="color: #000000;">.FlashMode));<br/>SB.Append(</span><span style="color: #800000;">"</span><span style="color: #800000;">\n\tLight source (WB): </span><span style="color: #800000;">"</span> + Enum.GetName(<span style="color: #0000ff;">typeof</span>(LightSources), <span style="color: #0000ff;">this</span><span style="color: #000000;">.LightSource));<br/></span><span style="color: #008000;">//</span><span style="color: #008000;">SB.Replace("\n", vbCrLf);<br/></span><span style="color: #008000;">//</span><span style="color: #008000;">SB.Replace("\t", vbTab);</span><br/><span style="color: #0000ff;">return</span><span style="color: #000000;"> SB.ToString();<br/>}<br/><br/>Nicely formatted well</span>-known properties<span style="color: #0000ff;">#region</span> Nicely formatted well-known properties<br/><br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Brand of equipment (EXIF EquipMake)<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> EquipmentMaker<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>.GetPropertyString((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.EquipMake);<br/>}<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Model of equipment (EXIF EquipModel)<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> EquipmentModel<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>.GetPropertyString((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.EquipModel);<br/>}<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Software used for processing (EXIF Software)<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> Software<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>.GetPropertyString((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.SoftwareUsed);<br/>}<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Orientation of image (position of row 0, column 0) (EXIF Orientation)<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span><span style="color: #000000;"> Orientations Orientation<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/>Int32 X </span>= <span style="color: #0000ff;">this</span>.GetPropertyInt16((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.Orientation);<br/><br/></span><span style="color: #0000ff;">if</span> (!Enum.IsDefined(<span style="color: #0000ff;">typeof</span><span style="color: #000000;">(Orientations), X))<br/></span><span style="color: #0000ff;">return</span><span style="color: #000000;"> Orientations.TopLeft;<br/></span><span style="color: #0000ff;">else</span><br/><span style="color: #0000ff;">return</span> (Orientations)Enum.Parse(<span style="color: #0000ff;">typeof</span>(Orientations), Enum.GetName(<span style="color: #0000ff;">typeof</span><span style="color: #000000;">(Orientations), X));<br/>}<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Time when image was last modified (EXIF DateTime).<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span><span style="color: #000000;"> DateTime DateTimeLastModified<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">try</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">return</span> DateTime.ParseExact(<span style="color: #0000ff;">this</span>.GetPropertyString((<span style="color: #0000ff;">int</span>)TagNames.DateTime), <span style="color: #800000;">@"</span><span style="color: #800000;">yyyy\:MM\:dd HH\:mm\:ss</span><span style="color: #800000;">"</span>, <span style="color: #0000ff;">null</span><span style="color: #000000;">);<br/>}<br/></span><span style="color: #0000ff;">catch</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">return</span><span style="color: #000000;"> DateTime.MinValue;<br/>}<br/>}<br/></span><span style="color: #0000ff;">set</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">try</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">this</span>.SetPropertyString((<span style="color: #0000ff;">int</span>)TagNames.DateTime, value.ToString(<span style="color: #800000;">@"</span><span style="color: #800000;">yyyy\:MM\:dd HH\:mm\:ss</span><span style="color: #800000;">"</span><span style="color: #000000;">));<br/>}<br/></span><span style="color: #0000ff;">catch</span><span style="color: #000000;"><br/>{ }<br/>}<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Time when image was taken (EXIF DateTimeOriginal).<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span><span style="color: #000000;"> DateTime DateTimeOriginal<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">try</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">return</span> DateTime.ParseExact(<span style="color: #0000ff;">this</span>.GetPropertyString((<span style="color: #0000ff;">int</span>)TagNames.ExifDTOrig), <span style="color: #800000;">@"</span><span style="color: #800000;">yyyy\:MM\:dd HH\:mm\:ss</span><span style="color: #800000;">"</span>, <span style="color: #0000ff;">null</span><span style="color: #000000;">);<br/>}<br/></span><span style="color: #0000ff;">catch</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">return</span><span style="color: #000000;"> DateTime.MinValue;<br/>}<br/>}<br/></span><span style="color: #0000ff;">set</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">try</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">this</span>.SetPropertyString((<span style="color: #0000ff;">int</span>)TagNames.ExifDTOrig, value.ToString(<span style="color: #800000;">@"</span><span style="color: #800000;">yyyy\:MM\:dd HH\:mm\:ss</span><span style="color: #800000;">"</span><span style="color: #000000;">));<br/>}<br/></span><span style="color: #0000ff;">catch</span><span style="color: #000000;"><br/>{ }<br/>}<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Time when image was digitized (EXIF DateTimeDigitized).<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span><span style="color: #000000;"> DateTime DateTimeDigitized<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">try</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">return</span> DateTime.ParseExact(<span style="color: #0000ff;">this</span>.GetPropertyString((<span style="color: #0000ff;">int</span>)TagNames.ExifDTDigitized), <span style="color: #800000;">@"</span><span style="color: #800000;">yyyy\:MM\:dd HH\:mm\:ss</span><span style="color: #800000;">"</span>, <span style="color: #0000ff;">null</span><span style="color: #000000;">);<br/>}<br/></span><span style="color: #0000ff;">catch</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">return</span><span style="color: #000000;"> DateTime.MinValue;<br/>}<br/>}<br/></span><span style="color: #0000ff;">set</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">try</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">this</span>.SetPropertyString((<span style="color: #0000ff;">int</span>)TagNames.ExifDTDigitized, value.ToString(<span style="color: #800000;">@"</span><span style="color: #800000;">yyyy\:MM\:dd HH\:mm\:ss</span><span style="color: #800000;">"</span><span style="color: #000000;">));<br/>}<br/></span><span style="color: #0000ff;">catch</span><span style="color: #000000;"><br/>{ }<br/>}<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Image width<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 04.09.2005 Changed output to Int32, load from image instead of EXIF<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span><span style="color: #000000;"> Int32 Width<br/>{<br/></span><span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span><span style="color: #000000;">._Image.Width; }<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Image height<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 04.09.2005 Changed output to Int32, load from image instead of EXIF<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span><span style="color: #000000;"> Int32 Height<br/>{<br/></span><span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span><span style="color: #000000;">._Image.Height; }<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> X resolution in dpi (EXIF XResolution/ResolutionUnit)<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">double</span><span style="color: #000000;"> ResolutionX<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">double</span> R = <span style="color: #0000ff;">this</span>.GetPropertyRational((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.XResolution).ToDouble();<br/><br/></span><span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">this</span>.GetPropertyInt16((<span style="color: #0000ff;">int</span>)TagNames.ResolutionUnit) == <span style="color: #800080;">3</span><span style="color: #000000;">)<br/>{<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> -- resolution is in points/cm</span><br/><span style="color: #0000ff;">return</span> R * <span style="color: #800080;">2.54</span><span style="color: #000000;">;<br/>}<br/></span><span style="color: #0000ff;">else</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> -- resolution is in points/inch</span><br/><span style="color: #0000ff;">return</span><span style="color: #000000;"> R;<br/>}<br/>}<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Y resolution in dpi (EXIF YResolution/ResolutionUnit)<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">double</span><span style="color: #000000;"> ResolutionY<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">double</span> R = <span style="color: #0000ff;">this</span>.GetPropertyRational((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.YResolution).ToDouble();<br/><br/></span><span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">this</span>.GetPropertyInt16((<span style="color: #0000ff;">int</span>)TagNames.ResolutionUnit) == <span style="color: #800080;">3</span><span style="color: #000000;">)<br/>{<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> -- resolution is in points/cm</span><br/><span style="color: #0000ff;">return</span> R * <span style="color: #800080;">2.54</span><span style="color: #000000;">;<br/>}<br/></span><span style="color: #0000ff;">else</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> -- resolution is in points/inch</span><br/><span style="color: #0000ff;">return</span><span style="color: #000000;"> R;<br/>}<br/>}<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Image title (EXIF ImageTitle)<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> Title<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>.GetPropertyString((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.ImageTitle);<br/>}<br/></span><span style="color: #0000ff;">set</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">try</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">this</span>.SetPropertyString((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.ImageTitle, value);<br/>}<br/></span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> { }<br/>}<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> User comment (EXIF UserComment)<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 13.06.2004 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> UserComment<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>.GetPropertyString((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.ExifUserComment);<br/>}<br/></span><span style="color: #0000ff;">set</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">try</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">this</span>.SetPropertyString((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.ExifUserComment, value);<br/>}<br/></span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> { }<br/>}<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Artist name (EXIF Artist)<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 13.06.2004 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> Artist<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>.GetPropertyString((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.Artist);<br/>}<br/></span><span style="color: #0000ff;">set</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">try</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">this</span>.SetPropertyString((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.Artist, value);<br/>}<br/></span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> { }<br/>}<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Image description (EXIF ImageDescription)<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> Description<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>.GetPropertyString((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.ImageDescription);<br/>}<br/></span><span style="color: #0000ff;">set</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">try</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">this</span>.SetPropertyString((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.ImageDescription, value);<br/>}<br/></span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> { }<br/>}<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Image copyright (EXIF Copyright)<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> Copyright<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>.GetPropertyString((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.Copyright);<br/>}<br/></span><span style="color: #0000ff;">set</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">try</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">this</span>.SetPropertyString((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.Copyright, value);<br/>}<br/></span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> { }<br/>}<br/>}<br/><br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Exposure time in seconds (EXIF ExifExposureTime/ExifShutterSpeed)<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">double</span><span style="color: #000000;"> ExposureTimeAbs<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">this</span>.IsPropertyDefined((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.ExifExposureTime))<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> -- Exposure time is explicitly specified</span><br/><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>.GetPropertyRational((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.ExifExposureTime).ToDouble();<br/></span><span style="color: #0000ff;">else</span><br/><span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">this</span>.IsPropertyDefined((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.ExifShutterSpeed))<br/></span><span style="color: #008000;">//</span><span style="color: #008000;">'-- Compute exposure time from shutter spee </span><br/><span style="color: #0000ff;">return</span> (<span style="color: #800080;">1</span> / Math.Pow(<span style="color: #800080;">2</span>, <span style="color: #0000ff;">this</span>.GetPropertyRational((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.ExifShutterSpeed).ToDouble()));<br/></span><span style="color: #0000ff;">else</span><br/><span style="color: #008000;">//</span><span style="color: #008000;"> -- Can't figure out </span><br/><span style="color: #0000ff;">return</span> <span style="color: #800080;">0</span><span style="color: #000000;">;<br/>}<br/>}<br/><br/></span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Rational ExposureTime<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">this</span>.IsPropertyDefined((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.ExifExposureTime))<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> -- Exposure time is explicitly specified</span><br/><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>.GetPropertyRational((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.ExifExposureTime);<br/></span><span style="color: #0000ff;">else</span><br/><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> Rational();<br/>}<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Aperture value as F number (EXIF ExifFNumber/ExifApertureValue)<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">double</span><span style="color: #000000;"> Aperture<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/></span><span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">this</span>.IsPropertyDefined((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.ExifFNumber))<br/></span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>.GetPropertyRational((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.ExifFNumber).ToDouble();<br/></span><span style="color: #0000ff;">else</span><br/><span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">this</span>.IsPropertyDefined((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.ExifAperture))<br/></span><span style="color: #0000ff;">return</span> Math.Pow(System.Math.Sqrt(<span style="color: #800080;">2</span>), <span style="color: #0000ff;">this</span>.GetPropertyRational((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.ExifAperture).ToDouble());<br/></span><span style="color: #0000ff;">else</span><br/><span style="color: #0000ff;">return</span> <span style="color: #800080;">0</span><span style="color: #000000;">;<br/>}<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Exposure program used (EXIF ExifExposureProg)<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> If not specified, returns Normal (2)<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span><span style="color: #000000;"> ExposurePrograms ExposureProgram<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/>Int32 X </span>= <span style="color: #0000ff;">this</span>.GetPropertyInt16((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.ExifExposureProg);<br/><br/></span><span style="color: #0000ff;">if</span> (Enum.IsDefined(<span style="color: #0000ff;">typeof</span><span style="color: #000000;">(ExposurePrograms), X))<br/></span><span style="color: #0000ff;">return</span> (ExposurePrograms)Enum.Parse(<span style="color: #0000ff;">typeof</span>(ExposurePrograms), Enum.GetName(<span style="color: #0000ff;">typeof</span><span style="color: #000000;">(ExposurePrograms), X));<br/></span><span style="color: #0000ff;">else</span><br/><span style="color: #0000ff;">return</span><span style="color: #000000;"> ExposurePrograms.Normal;<br/>}<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> ISO sensitivity<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span><span style="color: #000000;"> Int16 ISO<br/>{<br/></span><span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>.GetPropertyInt16((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.ExifISOSpeed); }<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Subject distance in meters (EXIF SubjectDistance)<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">double</span><span style="color: #000000;"> SubjectDistance<br/>{<br/></span><span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>.GetPropertyRational((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.ExifSubjectDist).ToDouble(); }<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Exposure method metering mode used (EXIF MeteringMode)<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> If not specified, returns Unknown (0)<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span><span style="color: #000000;"> ExposureMeteringModes ExposureMeteringMode<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/>Int32 X </span>= <span style="color: #0000ff;">this</span>.GetPropertyInt16((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.ExifMeteringMode);<br/><br/></span><span style="color: #0000ff;">if</span> (Enum.IsDefined(<span style="color: #0000ff;">typeof</span><span style="color: #000000;">(ExposureMeteringModes), X))<br/></span><span style="color: #0000ff;">return</span> (ExposureMeteringModes)Enum.Parse(<span style="color: #0000ff;">typeof</span>(ExposureMeteringModes), Enum.GetName(<span style="color: #0000ff;">typeof</span><span style="color: #000000;">(ExposureMeteringModes), X));<br/></span><span style="color: #0000ff;">else</span><br/><span style="color: #0000ff;">return</span><span style="color: #000000;"> ExposureMeteringModes.Unknown;<br/>}<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Focal length of lenses in mm (EXIF FocalLength)<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">double</span><span style="color: #000000;"> FocalLength<br/>{<br/></span><span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>.GetPropertyRational((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.ExifFocalLength).ToDouble(); }<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Flash mode (EXIF Flash)<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> If not present, value NotFired (0) is returned<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span><span style="color: #000000;"> FlashModes FlashMode<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/>Int32 X </span>= <span style="color: #0000ff;">this</span>.GetPropertyInt16((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.ExifFlash);<br/><br/></span><span style="color: #0000ff;">if</span> (Enum.IsDefined(<span style="color: #0000ff;">typeof</span><span style="color: #000000;">(FlashModes), X))<br/></span><span style="color: #0000ff;">return</span> (FlashModes)Enum.Parse(<span style="color: #0000ff;">typeof</span>(FlashModes), Enum.GetName(<span style="color: #0000ff;">typeof</span><span style="color: #000000;">(FlashModes), X));<br/></span><span style="color: #0000ff;">else</span><br/><span style="color: #0000ff;">return</span><span style="color: #000000;"> FlashModes.NotFired;<br/>}<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Light source / white balance (EXIF LightSource)<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> If not specified, returns Unknown (0).<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span><span style="color: #000000;"> LightSources LightSource<br/>{<br/></span><span style="color: #0000ff;">get</span><span style="color: #000000;"><br/>{<br/>Int32 X </span>= <span style="color: #0000ff;">this</span>.GetPropertyInt16((<span style="color: #0000ff;">int</span><span style="color: #000000;">)TagNames.ExifLightSource);<br/><br/></span><span style="color: #0000ff;">if</span> (Enum.IsDefined(<span style="color: #0000ff;">typeof</span><span style="color: #000000;">(LightSources), X))<br/></span><span style="color: #0000ff;">return</span> (LightSources)Enum.Parse(<span style="color: #0000ff;">typeof</span>(LightSources), Enum.GetName(<span style="color: #0000ff;">typeof</span><span style="color: #000000;">(LightSources), X));<br/></span><span style="color: #0000ff;">else</span><br/><span style="color: #0000ff;">return</span><span style="color: #000000;"> LightSources.Unknown;<br/>}<br/>}<br/><br/></span><span style="color: #0000ff;">#endregion</span><span style="color: #000000;"><br/><br/>Support methods </span><span style="color: #0000ff;">for</span> working with EXIF properties<span style="color: #0000ff;">#region</span> Support methods for working with EXIF properties<br/><br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Checks if current image has specified certain property<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> True if image has specified property, False otherwise.<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">bool</span><span style="color: #000000;"> IsPropertyDefined(Int32 PID)<br/>{<br/></span><span style="color: #0000ff;">return</span> (Array.IndexOf(<span style="color: #0000ff;">this</span>._Image.PropertyIdList, PID) &gt; -<span style="color: #800080;">1</span><span style="color: #000000;">);<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Gets specified Int32 property<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Property ID<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> Optional, default 0. Default value returned if property is not present.<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> Value of property or DefaultValue if property is not present.<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span><span style="color: #000000;"> Int32 GetPropertyInt32(Int32 PID)<br/>{<br/></span><span style="color: #0000ff;">return</span> GetPropertyInt32(PID, <span style="color: #800080;">0</span><span style="color: #000000;">);<br/>}<br/><br/></span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Int32 GetPropertyInt32(Int32 PID, Int32 DefaultValue)<br/>{<br/></span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (IsPropertyDefined(PID))<br/></span><span style="color: #0000ff;">return</span> GetInt32(<span style="color: #0000ff;">this</span><span style="color: #000000;">._Image.GetPropertyItem(PID).Value);<br/></span><span style="color: #0000ff;">else</span><br/><span style="color: #0000ff;">return</span><span style="color: #000000;"> DefaultValue;<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Gets specified Int16 property<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Property ID<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> Optional, default 0. Default value returned if property is not present.<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> Value of property or DefaultValue if property is not present.<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span><span style="color: #000000;"> Int16 GetPropertyInt16(Int32 PID)<br/>{<br/></span><span style="color: #0000ff;">return</span> GetPropertyInt16(PID, <span style="color: #800080;">0</span><span style="color: #000000;">);<br/>}<br/><br/></span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Int16 GetPropertyInt16(Int32 PID, Int16 DefaultValue)<br/>{<br/></span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (IsPropertyDefined(PID))<br/></span><span style="color: #0000ff;">return</span> GetInt16(<span style="color: #0000ff;">this</span><span style="color: #000000;">._Image.GetPropertyItem(PID).Value);<br/></span><span style="color: #0000ff;">else</span><br/><span style="color: #0000ff;">return</span><span style="color: #000000;"> DefaultValue;<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Gets specified string property<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Property ID<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> Optional, default String.Empty. Default value returned if property is not present.<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Value of property or DefaultValue if property is not present.<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> GetPropertyString(Int32 PID)<br/>{<br/></span><span style="color: #0000ff;">return</span> GetPropertyString(PID, <span style="color: #800000;">""</span><span style="color: #000000;">);<br/>}<br/><br/></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> GetPropertyString(Int32 PID, <span style="color: #0000ff;">string</span><span style="color: #000000;"> DefaultValue)<br/>{<br/></span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (IsPropertyDefined(PID))<br/></span><span style="color: #0000ff;">return</span> GetString(<span style="color: #0000ff;">this</span><span style="color: #000000;">._Image.GetPropertyItem(PID).Value);<br/></span><span style="color: #0000ff;">else</span><br/><span style="color: #0000ff;">return</span><span style="color: #000000;"> DefaultValue;<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Gets specified property in raw form<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Property ID<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> Optional, default Nothing. Default value returned if property is not present.<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Is recommended to use typed methods (like etc.) instead, when possible.<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 05.09.2005 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">byte</span>[] GetProperty(Int32 PID, <span style="color: #0000ff;">byte</span><span style="color: #000000;">[] DefaultValue)<br/>{<br/></span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (IsPropertyDefined(PID))<br/></span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span><span style="color: #000000;">._Image.GetPropertyItem(PID).Value;<br/></span><span style="color: #0000ff;">else</span><br/><span style="color: #0000ff;">return</span><span style="color: #000000;"> DefaultValue;<br/>}<br/><br/></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">byte</span><span style="color: #000000;">[] GetProperty(Int32 PID)<br/>{<br/></span><span style="color: #0000ff;">return</span> GetProperty(PID, <span style="color: #0000ff;">null</span><span style="color: #000000;">);<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Gets specified rational property<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Property ID<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Value of property or 0/1 if not present.<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span><span style="color: #000000;"> Rational GetPropertyRational(Int32 PID)<br/>{<br/></span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (IsPropertyDefined(PID))<br/></span><span style="color: #0000ff;">return</span> GetRational(<span style="color: #0000ff;">this</span><span style="color: #000000;">._Image.GetPropertyItem(PID).Value);<br/></span><span style="color: #0000ff;">else</span><span style="color: #000000;"><br/>{<br/>Rational R;<br/>R.Numerator </span>= <span style="color: #800080;">0</span><span style="color: #000000;">;<br/>R.Denominator </span>= <span style="color: #800080;">1</span><span style="color: #000000;">;<br/></span><span style="color: #0000ff;">return</span><span style="color: #000000;"> R;<br/>}<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Sets specified string property<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Property ID<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> Value to be set<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 12.6.2004 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> SetPropertyString(Int32 PID, <span style="color: #0000ff;">string</span><span style="color: #000000;"> Value)<br/>{<br/></span><span style="color: #0000ff;">byte</span>[] Data = <span style="color: #0000ff;">this</span>._Encoding.GetBytes(Value + <span style="color: #800000;">'</span><span style="color: #800000;">\0</span><span style="color: #800000;">'</span><span style="color: #000000;">);<br/>SetProperty(PID, Data, ExifDataTypes.AsciiString);<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Sets specified Int16 property<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Property ID<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> Value to be set<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 12.6.2004 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> SetPropertyInt16(Int32 PID, Int16 Value)<br/>{<br/></span><span style="color: #0000ff;">byte</span>[] Data = <span style="color: #0000ff;">new</span> <span style="color: #0000ff;">byte</span>[<span style="color: #800080;">2</span><span style="color: #000000;">];<br/>Data[</span><span style="color: #800080;">0</span>] = (<span style="color: #0000ff;">byte</span>)(Value &amp; <span style="color: #800080;">0xFF</span><span style="color: #000000;">);<br/>Data[</span><span style="color: #800080;">1</span>] = (<span style="color: #0000ff;">byte</span>)((Value &amp; <span style="color: #800080;">0xFF00</span>) &gt;&gt; <span style="color: #800080;">8</span><span style="color: #000000;">);<br/>SetProperty(PID, Data, ExifDataTypes.SignedShort);<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Sets specified Int32 property<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Property ID<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> Value to be set<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 13.06.2004 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> SetPropertyInt32(Int32 PID, Int32 Value)<br/>{<br/></span><span style="color: #0000ff;">byte</span>[] Data = <span style="color: #0000ff;">new</span> <span style="color: #0000ff;">byte</span>[<span style="color: #800080;">4</span><span style="color: #000000;">];<br/></span><span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> I = <span style="color: #800080;">0</span>; I &lt; <span style="color: #800080;">4</span>; I++<span style="color: #000000;">)<br/>{<br/>Data[I] </span>= (<span style="color: #0000ff;">byte</span>)(Value &amp; <span style="color: #800080;">0xFF</span><span style="color: #000000;">);<br/>Value </span>&gt;&gt;= <span style="color: #800080;">8</span><span style="color: #000000;">;<br/>}<br/>SetProperty(PID, Data, ExifDataTypes.SignedLong);<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Sets specified property in raw form<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Property ID<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> Raw data<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> EXIF data type<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> Is recommended to use typed methods (like etc.) instead, when possible.<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 12.6.2004 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> SetProperty(Int32 PID, <span style="color: #0000ff;">byte</span><span style="color: #000000;">[] Data, ExifDataTypes Type)<br/>{<br/>System.Drawing.Imaging.PropertyItem P </span>= <span style="color: #0000ff;">this</span>._Image.PropertyItems[<span style="color: #800080;">0</span><span style="color: #000000;">];<br/>P.Id </span>=<span style="color: #000000;"> PID;<br/>P.Value </span>=<span style="color: #000000;"> Data;<br/>P.Type </span>=<span style="color: #000000;"> (Int16)Type;<br/>P.Len </span>=<span style="color: #000000;"> Data.Length;<br/></span><span style="color: #0000ff;">this</span><span style="color: #000000;">._Image.SetPropertyItem(P);<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Reads Int32 from EXIF bytearray.<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> EXIF bytearray to process<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 05.09.2005 Changed from public shared to private instance method<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">private</span> Int32 GetInt32(<span style="color: #0000ff;">byte</span><span style="color: #000000;">[] B)<br/>{<br/></span><span style="color: #0000ff;">if</span> (B.Length &lt; <span style="color: #800080;">4</span><span style="color: #000000;">)<br/></span><span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span> ArgumentException(<span style="color: #800000;">"</span><span style="color: #800000;">Data too short (4 bytes expected)</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">B</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/><br/></span><span style="color: #0000ff;">return</span> B[<span style="color: #800080;">3</span>] &lt;&lt; <span style="color: #800080;">24</span> | B[<span style="color: #800080;">2</span>] &lt;&lt; <span style="color: #800080;">16</span> | B[<span style="color: #800080;">1</span>] &lt;&lt; <span style="color: #800080;">8</span> | B[<span style="color: #800080;">0</span><span style="color: #000000;">];<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Reads Int16 from EXIF bytearray.<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> EXIF bytearray to process<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 05.09.2005 Changed from public shared to private instance method<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">private</span> Int16 GetInt16(<span style="color: #0000ff;">byte</span><span style="color: #000000;">[] B)<br/>{<br/></span><span style="color: #0000ff;">if</span> (B.Length &lt; <span style="color: #800080;">2</span><span style="color: #000000;">)<br/></span><span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span> ArgumentException(<span style="color: #800000;">"</span><span style="color: #800000;">Data too short (2 bytes expected)</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">B</span><span style="color: #800000;">"</span><span style="color: #000000;">);<br/><br/></span><span style="color: #0000ff;">return</span> (<span style="color: #0000ff;">short</span>)(B[<span style="color: #800080;">1</span>] &lt;&lt; <span style="color: #800080;">8</span> | B[<span style="color: #800080;">0</span><span style="color: #000000;">]);<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Reads string from EXIF bytearray.<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> EXIF bytearray to process<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 05.09.2005 Changed from public shared to private instance method<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">string</span> GetString(<span style="color: #0000ff;">byte</span><span style="color: #000000;">[] B)<br/>{<br/></span><span style="color: #0000ff;">string</span> R = <span style="color: #0000ff;">this</span><span style="color: #000000;">._Encoding.GetString(B);<br/></span><span style="color: #0000ff;">if</span> (R.EndsWith(<span style="color: #800000;">"</span><span style="color: #800000;">\0</span><span style="color: #800000;">"</span><span style="color: #000000;">))<br/>R </span>= R.Substring(<span style="color: #800080;">0</span>, R.Length - <span style="color: #800080;">1</span><span style="color: #000000;">);<br/></span><span style="color: #0000ff;">return</span><span style="color: #000000;"> R;<br/>}<br/><br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Reads rational from EXIF bytearray.<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> EXIF bytearray to process<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 05.09.2005 Changed from public shared to private instance method<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">private</span> Rational GetRational(<span style="color: #0000ff;">byte</span><span style="color: #000000;">[] B)<br/>{<br/>Rational R </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> Rational();<br/></span><span style="color: #0000ff;">byte</span>[] N = <span style="color: #0000ff;">new</span> <span style="color: #0000ff;">byte</span>[<span style="color: #800080;">4</span><span style="color: #000000;">];<br/></span><span style="color: #0000ff;">byte</span>[] D = <span style="color: #0000ff;">new</span> <span style="color: #0000ff;">byte</span>[<span style="color: #800080;">4</span><span style="color: #000000;">];<br/>Array.Copy(B, </span><span style="color: #800080;">0</span>, N, <span style="color: #800080;">0</span>, <span style="color: #800080;">4</span><span style="color: #000000;">);<br/>Array.Copy(B, </span><span style="color: #800080;">4</span>, D, <span style="color: #800080;">0</span>, <span style="color: #800080;">4</span><span style="color: #000000;">);<br/>R.Denominator </span>= <span style="color: #0000ff;">this</span><span style="color: #000000;">.GetInt32(D);<br/>R.Numerator </span>= <span style="color: #0000ff;">this</span><span style="color: #000000;">.GetInt32(N);<br/></span><span style="color: #0000ff;">return</span><span style="color: #000000;"> R;<br/>}<br/><br/></span><span style="color: #0000ff;">#endregion</span><br/><br/><span style="color: #800000;">"</span><span style="color: #800000;"> IDisposable implementation </span><span style="color: #800000;">"</span><span style="color: #0000ff;">#region</span> " IDisposable implementation "<br/><br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> Disposes unmanaged resources of this class<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span> <br/><span style="color: #008000;">//</span><span style="color: #008000;"> [altair] 10.09.2003 Created<br/></span><span style="color: #008000;">//</span> <br/><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Dispose()<br/>{<br/></span><span style="color: #0000ff;">this</span><span style="color: #000000;">._Image.Dispose();<br/>}<br/><br/></span><span style="color: #0000ff;">#endregion</span><span style="color: #000000;"><br/><br/>}<br/><br/>}</span></div><p>&nbsp;</p><img src="http://counter.cnblogs.com/blog/rss/2662521" width="1" height="1" alt=""/><br/><p>本文链接：<a href="http://www.cnblogs.com/jxsoft/archive/2012/08/29/2662521.html" target="_blank">http://www.cnblogs.com/jxsoft/archive/2012/08/29/2662521.html</a>，转载请注明。</p>
</content>
</entry>
<entry>
<id>
http://www.cnblogs.com/jxsoft/archive/2012/07/09/2583710.html
</id>
<title type="text">Delphi 2010安装及使用UniDAC 4.0 . - 许明吉博客</title>
<summary type="text">
Delphi 2010安装及使用UniDAC 4.0 . 分类： unidac 2012-04-08 11:30 77人阅读 评论(0) 收藏 举报UniDAC是一个功能强大的非可视化跨数据库的数据访问组件，可用于Delphi，Delphi for .NET，C++Builder，and Lazarus (Free Pascal)。它提供了对流行数据库服务器的统一访问，像Oracle，Microsoft SQL Server，MySQL，InterBase，Firebird，PostgreSQL，SQLite，DB2，Microsoft Access，Sybase Advantage D...
</summary>
<published>2012-07-09T13:40:00Z</published>
<updated>2012-07-09T13:40:00Z</updated>
<author>
<name>许明吉博客</name>
<uri>http://www.cnblogs.com/jxsoft/</uri>
</author>
<link rel="alternate" href="http://www.cnblogs.com/jxsoft/archive/2012/07/09/2583710.html"/>
<link rel="alternate" type="text/html" href="http://www.cnblogs.com/jxsoft/archive/2012/07/09/2583710.html"/>
<content type="html">
<p><strong><span class="link_title"><a href="http://blog.csdn.net/2353939/article/details/7437336"> Delphi 2010安装及使用UniDAC 4.0 . </a></span></strong></p><div class="article_manage"><span class="link_categories"> 分类： <a href="http://blog.csdn.net/2353939/article/category/1119021">unidac</a> </span> <span class="link_postdate">2012-04-08 11:30</span> <span class="link_view" title="阅读次数">77人阅读</span> <span class="link_comments" title="评论次数"><a href="http://blog.csdn.net/2353939/article/details/7437336#comments">评论</a>(0)</span> <span class="link_collect"><a title="收藏">收藏</a></span> <span class="link_report"><a title="举报" href="http://blog.csdn.net/2353939/article/details/7437336#report">举报</a></span></div><p>UniDAC是一个功能强大的非可视化跨数据库的数据访问组件，可用于Delphi，Delphi for .NET，C++Builder，and Lazarus (Free Pascal)。它提供了对流行数据库服务器的统一访问，像Oracle，Microsoft SQL Server，MySQL，InterBase，Firebird，PostgreSQL，SQLite，DB2，Microsoft Access，Sybase Advantage Database Server，Sybase Adaptive Server Enterprise，和其他数据库（使用ODBC驱动）。&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;从网上下载到<a href="http://download.csdn.net/detail/akof1314/3713545" target="_blank"><span style="color: #ca0000;">UniDAC 4.0</span></a>的源码版本，安装过程如下：<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;1.进入"<span style="color: #ff0000;">...\unidac40src\Source\Delphi14</span>"文件夹，找到<span style="color: #ff0000;">"Make.bat</span>"文件，打开并修改IDE目录路径，如下：</p><div style="border-width: 1px; border-style: solid; border-color: #cccccc; width: 100%;"><table style="background-color: #efefef; width: 100%; font-family: Courier New;" border="0" cellspacing="8"><tbody><tr><td style="font-family: Consolas; font-size: 90%; vertical-align: text-top;">set&nbsp;IdeDir="%PROGRAMFILES%\Embarcadero\RAD&nbsp;Studio\7.0&nbsp;<br />call&nbsp;..\Make.bat&nbsp;Delphi&nbsp;14&nbsp;WIN32&nbsp;</td></tr></tbody></table></div><p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; 因为我这里Delphi 2010不是安装在默认位置，故修改如下：</p><div style="border-width: 1px; border-style: solid; border-color: #cccccc; width: 100%;"><table style="background-color: #efefef; width: 100%; font-family: Courier New;" border="0" cellspacing="8"><tbody><tr><td style="font-family: Consolas; font-size: 90%; vertical-align: text-top;">set&nbsp;IdeDir="D:\Program&nbsp;Files\Embarcadero\RAD&nbsp;Studio\7.0&nbsp;<br />call&nbsp;..\Make.bat&nbsp;Delphi&nbsp;14&nbsp;WIN32&nbsp;</td></tr></tbody></table></div><p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; 2.执行"<span style="color: #ff0000;">Make.bat</span>"文件，自动执行一系列操作后，到"<span style="color: #ff0000;">...\unidac40src\Bin\Delphi14</span>"目录下，可发现库已经生成完毕；<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;3.运行Delphi 2010，菜单&rarr;"Tools"&rarr;"Options"&rarr;"Environment Options"&rarr;"<span style="color: #ff0000;">Environment Variables</span>"，添加"...\unidac40src\Bin\Delphi14"完整路径到"<span style="color: #ff0000;">PATH</span>"环境变量；<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;4.菜单&rarr;"<span style="color: #3366ff;">Component</span>"-&gt;"<span style="color: #ff0000;">Install Packages...</span>"，"Add"添加"...\unidac40src\Bin\Delphi14"目录下的"<span style="color: #ff0000;">dclunidac140.bpl</span>"；<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;5.菜单&rarr;"Tools"&rarr;"Options"&rarr;"<span style="color: #ff0000;">Environment Options</span>"&rarr;"<span style="color: #ff0000;">Delphi Options</span>"&rarr;"<span style="color: #ff0000;">Library - Win32</span>"，在"<span style="color: #ff0000;">Library Path</span>"添加"<span style="color: #ff0000;">...\unidac40src\Lib\Delphi14</span>"路径；<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;6.此时，已可以使用UniDAC连接数据库了。若是需要链接查看源代码，将"...\unidac40src\Source"路径也添加到"<span style="color: #3366ff;">Library Path</span>"。<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;测试连接MySql数据库：<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;1.新建一个应用程序，在面板上拖动TUniConnection、TMySQLUniProvider、TUniQuery、TUniDataSource、TDBGrid到窗体上，如下图所示：<br /><img src="http://hi.csdn.net/attachment/201110/24/0_1319441168SCHW.gif" alt="" /><br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;2.右键TUniConnection，选择"<span style="color: #ff0000;">Connection Editor...</span>"，填入数据库连接参数，如下图所示：<br />&nbsp;<img src="http://hi.csdn.net/attachment/201110/24/0_1319441183cUVs.gif" alt="" /></p><p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;3.因为MySql一般设置字符集为UTF-8，而Delphi 2010工程字符集是Unicode，在"Options"页面，设置"<span style="color: #3366ff;">UseUnicode</span>"为True，这可以通知服务器，客户端和服务器双方之间的所有数据都将通过UTF-8编码，设置这个选项会转换所有的TStringField字段类型到TWideStringField字段类型，使得几乎所有的语言符号都可以正确工作，但另一方面，也引起工作延迟。<br /><img src="http://hi.csdn.net/attachment/201110/24/0_1319441201JlDz.gif" alt="" /><br /></p><p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; 4.关联其他项，在TUniQuery的SQL里面写"select * from city"，设置Active为True，运行程序，可以看到符号都可以正常显示，如下图所示：<br /><img src="http://hi.csdn.net/attachment/201110/24/0_1319441215jqYl.gif" alt="" /><br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;代码实现的方式如下：</p><p></p><table style="background-color: #efefef; width: 100%; font-family: Courier New;" border="0" cellspacing="8"><tbody><tr><td style="text-align: center; width: 0.5%; font-family: Consolas; white-space: nowrap; color: #bbbbbb; font-size: 90%; vertical-align: text-top;">01<br />02<br />03<br />04<br />05<br />06<br />07<br />08<br />09<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24</td><td style="background-color: #6ce26c; width: 1px;">&nbsp;</td><td style="font-family: Consolas; font-size: 90%; vertical-align: text-top;"><span style="color: #0000ff;">procedure</span>&nbsp;TForm1.FormCreate(Sender:&nbsp;TObject);&nbsp;<br /><span style="color: #0000ff;">begin</span>&nbsp;<br />&nbsp;&nbsp;UniQuery1.Connection&nbsp;:=&nbsp;UniConnection1;&nbsp;<br />&nbsp;&nbsp;UniDataSource1.DataSet&nbsp;:=&nbsp;UniQuery1;&nbsp;<br />&nbsp;&nbsp;DBGrid1.DataSource&nbsp;:=&nbsp;UniDataSource1;&nbsp;<br />&nbsp;&nbsp;<span style="color: #0000ff;">with</span>&nbsp;UniConnection1&nbsp;<span style="color: #0000ff;">do</span>&nbsp;<br />&nbsp;&nbsp;<span style="color: #0000ff;">begin</span>&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;ProviderName&nbsp;:=&nbsp;<span style="color: #a31515;">'MySQL'</span>;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;Username&nbsp;:=&nbsp;<span style="color: #a31515;">'root'</span>;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;Password&nbsp;:=&nbsp;<span style="color: #a31515;">'123'</span>;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;Server&nbsp;:=&nbsp;<span style="color: #a31515;">'192.168.82.201'</span>;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;Database&nbsp;:=&nbsp;<span style="color: #a31515;">'world'</span>;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;Port&nbsp;:=&nbsp;<span style="color: #ff0000;">3306</span>;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;SpecificOptions.Values<span style="color: #a31515;">['UseUnicode']</span>&nbsp;:=&nbsp;<span style="color: #a31515;">'True'</span>;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #0000ff;">try</span>&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Connect;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UniQuery1.Close;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UniQuery1.SQL.Text&nbsp;:=&nbsp;<span style="color: #a31515;">'select&nbsp;*&nbsp;from&nbsp;city'</span>;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UniQuery1.Open;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #0000ff;">except</span>&nbsp;<br />&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #0000ff;">end</span>;&nbsp;<br />&nbsp;&nbsp;<span style="color: #0000ff;">end</span>;&nbsp;<br /><span style="color: #0000ff;">end</span>;&nbsp;</td></tr></tbody></table><img src="http://counter.cnblogs.com/blog/rss/2583710" width="1" height="1" alt=""/><br/><p>本文链接：<a href="http://www.cnblogs.com/jxsoft/archive/2012/07/09/2583710.html" target="_blank">http://www.cnblogs.com/jxsoft/archive/2012/07/09/2583710.html</a>，转载请注明。</p>
</content>
</entry>
<entry>
<id>
http://www.cnblogs.com/jxsoft/archive/2012/06/29/2569876.html
</id>
<title type="text">C#可以直接调用的Win32API - 许明吉博客</title>
<summary type="text">
以前整理的Win32API，可以直接在C#中直接调用，在做WinForm时还是很有帮助的。以前用在一个多窗口界面中，当轮询窗口时，调用API会提高很多效率。 源码下载 http://files.cnblogs.com/lordeo/win32api.rar 源码包含三个文件Win32API.cs，Enums.cs，Structs.cs分别如下 Win32API.cs using System;using System.Drawing;using System.Runtime.InteropServices;using Lordal.Window.Form.Lib.General;using L
</summary>
<published>2012-06-29T06:24:00Z</published>
<updated>2012-06-29T06:24:00Z</updated>
<author>
<name>许明吉博客</name>
<uri>http://www.cnblogs.com/jxsoft/</uri>
</author>
<link rel="alternate" href="http://www.cnblogs.com/jxsoft/archive/2012/06/29/2569876.html"/>
<link rel="alternate" type="text/html" href="http://www.cnblogs.com/jxsoft/archive/2012/06/29/2569876.html"/>
<content type="html">
<p>以前整理的Win32&nbsp;API，可以直接在C#中直接调用，在做WinForm时还是很有帮助的。以前用在一个多窗口界面中，当轮询窗口时，调用API会提高很多效率。 <br /><br />源码下载 <br /><a class="Url" href="http://files.cnblogs.com/lordeo/win32api.rar">http://files.cnblogs.com/lordeo/win32api.rar</a> <br /><br />源码包含三个文件Win32API.cs，Enums.cs，Structs.cs分别如下 <br /><br />Win32API.cs </p><div style="background-color: #F5F5F5;border: 1px solid #CCCCCC;padding:10px;">using System;<br/>using System.Drawing;<br/>using System.Runtime.InteropServices;<br/>using Lordal.Window.Form.Lib.General;<br/>using Lordal.Window.Form.Lib.Win32;<br/><br/>namespace Lordeo.Framework<br/>{<br/> /// &lt;summary&gt;<br/> /// Windows API Functions<br/> /// &lt;/summary&gt;<br/> public class Win32API<br/> {<br/> #region .ctor()<br/> // No need to construct this object<br/> private Win32API()<br/> {<br/> }<br/> #endregion<br/><br/> #region Constans values<br/> public const string TOOLBARCLASSNAME = "ToolbarWindow32";<br/> public const string REBARCLASSNAME = "ReBarWindow32";<br/> public const string PROGRESSBARCLASSNAME = "msctls_progress32";<br/> public const string SCROLLBAR = "SCROLLBAR";<br/> #endregion<br/><br/> #region CallBacks<br/> public delegate IntPtr HookProc(int nCode, IntPtr wParam, IntPtr lParam);<br/> #endregion<br/><br/> #region Kernel32.dll functions<br/> [DllImport("kernel32.dll", ExactSpelling = true, CharSet = CharSet.Auto)]<br/> public static extern int GetCurrentThreadId();<br/> #endregion<br/><br/> #region Gdi32.dll functions<br/> [DllImport("gdi32.dll")]<br/> static public extern bool StretchBlt(IntPtr hDCDest, int XOriginDest, int YOriginDest, int WidthDest, int HeightDest,<br/> IntPtr hDCSrc, int XOriginScr, int YOriginSrc, int WidthScr, int HeightScr, uint Rop);<br/> [DllImport("gdi32.dll")]<br/> static public extern IntPtr CreateCompatibleDC(IntPtr hDC);<br/> [DllImport("gdi32.dll")]<br/> static public extern IntPtr CreateCompatibleBitmap(IntPtr hDC, int Width, int Heigth);<br/> [DllImport("gdi32.dll")]<br/> static public extern IntPtr SelectObject(IntPtr hDC, IntPtr hObject);<br/> [DllImport("gdi32.dll")]<br/> static public extern bool BitBlt(IntPtr hDCDest, int XOriginDest, int YOriginDest, int WidthDest, int HeightDest,<br/> IntPtr hDCSrc, int XOriginScr, int YOriginSrc, uint Rop);<br/> [DllImport("gdi32.dll")]<br/> static public extern IntPtr DeleteDC(IntPtr hDC);<br/> [DllImport("gdi32.dll")]<br/> static public extern bool PatBlt(IntPtr hDC, int XLeft, int YLeft, int Width, int Height, uint Rop);<br/> [DllImport("gdi32.dll")]<br/> static public extern bool DeleteObject(IntPtr hObject);<br/> [DllImport("gdi32.dll")]<br/> static public extern uint GetPixel(IntPtr hDC, int XPos, int YPos);<br/> [DllImport("gdi32.dll")]<br/> static public extern int SetMapMode(IntPtr hDC, int fnMapMode);<br/> [DllImport("gdi32.dll")]<br/> static public extern int GetObjectType(IntPtr handle);<br/> [DllImport("gdi32")]<br/> public static extern IntPtr CreateDIBSection(IntPtr hdc, ref BITMAPINFO_FLAT bmi,<br/> int iUsage, ref int ppvBits, IntPtr hSection, int dwOffset);<br/> [DllImport("gdi32")]<br/> public static extern int GetDIBits(IntPtr hDC, IntPtr hbm, int StartScan, int ScanLines, int lpBits, BITMAPINFOHEADER bmi, int usage);<br/> [DllImport("gdi32")]<br/> public static extern int GetDIBits(IntPtr hdc, IntPtr hbm, int StartScan, int ScanLines, int lpBits, ref BITMAPINFO_FLAT bmi, int usage);<br/> [DllImport("gdi32")]<br/> public static extern IntPtr GetPaletteEntries(IntPtr hpal, int iStartIndex, int nEntries, byte[] lppe);<br/> [DllImport("gdi32")]<br/> public static extern IntPtr GetSystemPaletteEntries(IntPtr hdc, int iStartIndex, int nEntries, byte[] lppe);<br/> [DllImport("gdi32")]<br/> public static extern uint SetDCBrushColor(IntPtr hdc, uint crColor);<br/> [DllImport("gdi32")]<br/> public static extern IntPtr CreateSolidBrush(uint crColor);<br/> [DllImport("gdi32")]<br/> public static extern int SetBkMode(IntPtr hDC, BackgroundMode mode);<br/> [DllImport("gdi32")]<br/> public static extern int SetViewportOrgEx(IntPtr hdc, int x, int y, int param);<br/> [DllImport("gdi32")]<br/> public static extern uint SetTextColor(IntPtr hDC, uint colorRef);<br/> [DllImport("gdi32")]<br/> public static extern int SetStretchBltMode(IntPtr hDC, int StrechMode);<br/> #endregion<br/><br/> #region Uxtheme.dll functions<br/> [DllImport("uxtheme.dll")]<br/> static public extern int SetWindowTheme(IntPtr hWnd, string AppID, string ClassID);<br/> #endregion<br/><br/> #region User32.dll functions<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public static extern IntPtr GetDC(IntPtr hWnd);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public static extern int ReleaseDC(IntPtr hWnd, IntPtr hDC);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> static public extern IntPtr GetDesktopWindow();<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> static public extern bool ShowWindow(IntPtr hWnd, short State);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> static public extern bool UpdateWindow(IntPtr hWnd);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> static public extern bool SetForegroundWindow(IntPtr hWnd);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> static public extern bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int x, int y, int Width, int Height, uint flags);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> static public extern bool OpenClipboard(IntPtr hWndNewOwner);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> static public extern bool CloseClipboard();<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> static public extern bool EmptyClipboard();<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> static public extern IntPtr SetClipboardData(uint Format, IntPtr hData);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> static public extern bool GetMenuItemRect(IntPtr hWnd, IntPtr hMenu, uint Item, ref RECT rc);<br/> [DllImport("user32.dll", ExactSpelling = true, CharSet = CharSet.Auto)]<br/> public static extern IntPtr GetParent(IntPtr hWnd);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public static extern int SendMessage(IntPtr hWnd, int msg, int wParam, int lParam);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public static extern IntPtr SendMessage(IntPtr hWnd, int msg, int wParam, IntPtr lParam);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public static extern void SendMessage(IntPtr hWnd, int msg, int wParam, ref RECT lParam);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public static extern int SendMessage(IntPtr hWnd, int msg, int wParam, ref POINT lParam);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public static extern void SendMessage(IntPtr hWnd, int msg, int wParam, ref TBBUTTON lParam);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public static extern void SendMessage(IntPtr hWnd, int msg, int wParam, ref TBBUTTONINFO lParam);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public static extern int SendMessage(IntPtr hWnd, int msg, int wParam, ref REBARBANDINFO lParam);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public static extern void SendMessage(IntPtr hWnd, int msg, int wParam, ref TVITEM lParam);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public static extern void SendMessage(IntPtr hWnd, int msg, int wParam, ref LVITEM lParam);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public static extern void SendMessage(IntPtr hWnd, int msg, int wParam, ref HDITEM lParam);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public static extern void SendMessage(IntPtr hWnd, int msg, int wParam, ref HD_HITTESTINFO hti);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public static extern IntPtr PostMessage(IntPtr hWnd, int msg, int wParam, int lParam);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public static extern IntPtr SetWindowsHookEx(int hookid, HookProc pfnhook, IntPtr hinst, int threadid);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]<br/> public static extern bool UnhookWindowsHookEx(IntPtr hhook);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]<br/> public static extern IntPtr CallNextHookEx(IntPtr hhook, int code, IntPtr wparam, IntPtr lparam);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public static extern IntPtr SetFocus(IntPtr hWnd);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public extern static int DrawText(IntPtr hdc, string lpString, int nCount, ref RECT lpRect, int uFormat);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public extern static IntPtr SetParent(IntPtr hChild, IntPtr hParent);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public extern static IntPtr GetDlgItem(IntPtr hDlg, int nControlID);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public extern static int GetClientRect(IntPtr hWnd, ref RECT rc);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public extern static int InvalidateRect(IntPtr hWnd, IntPtr rect, int bErase);<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern bool WaitMessage();<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern bool PeekMessage(ref MSG msg, int hWnd, uint wFilterMin, uint wFilterMax, uint wFlag);<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern bool GetMessage(ref MSG msg, int hWnd, uint wFilterMin, uint wFilterMax);<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern bool TranslateMessage(ref MSG msg);<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern bool DispatchMessage(ref MSG msg);<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern IntPtr LoadCursor(IntPtr hInstance, uint cursor);<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern IntPtr SetCursor(IntPtr hCursor);<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern IntPtr GetFocus();<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern bool ReleaseCapture();<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern IntPtr BeginPaint(IntPtr hWnd, ref PAINTSTRUCT ps);<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern bool EndPaint(IntPtr hWnd, ref PAINTSTRUCT ps);<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern bool UpdateLayeredWindow(IntPtr hwnd, IntPtr hdcDst, ref POINT pptDst, ref SIZE psize, IntPtr hdcSrc, ref POINT pprSrc, Int32 crKey, ref BLENDFUNCTION pblend, Int32 dwFlags);<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern bool GetWindowRect(IntPtr hWnd, ref RECT rect);<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern bool ClientToScreen(IntPtr hWnd, ref POINT pt);<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern bool TrackMouseEvent(ref TRACKMOUSEEVENTS tme);<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern bool SetWindowRgn(IntPtr hWnd, IntPtr hRgn, bool redraw);<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern ushort GetKeyState(int virtKey);<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern bool MoveWindow(IntPtr hWnd, int x, int y, int width, int height, bool repaint);<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern int GetClassName(IntPtr hWnd, out STRINGBUFFER ClassName, int nMaxCount);<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern int SetWindowLong(IntPtr hWnd, int nIndex, int dwNewLong);<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern IntPtr GetDCEx(IntPtr hWnd, IntPtr hRegion, uint flags);<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern IntPtr GetWindowDC(IntPtr hWnd);<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern int FillRect(IntPtr hDC, ref RECT rect, IntPtr hBrush);<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern int GetWindowPlacement(IntPtr hWnd, ref WINDOWPLACEMENT wp);<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern int SetWindowText(IntPtr hWnd, string text);<br/> [DllImport("User32.dll", CharSet = CharSet.Auto)]<br/> public static extern int GetWindowText(IntPtr hWnd, out STRINGBUFFER text, int maxCount);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> static public extern int SendMessage(IntPtr hWnd, int Msg, IntPtr wParam, IntPtr lParam);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> static public extern IntPtr SetClipboardViewer(IntPtr hWndNewViewer);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> static public extern int ChangeClipboardChain(IntPtr hWndRemove, IntPtr hWndNewNext);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> static public extern int GetSystemMetrics(int nIndex);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> static public extern int SetScrollInfo(IntPtr hwnd, int bar, ref SCROLLINFO si, int fRedraw);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public static extern int ShowScrollBar(IntPtr hWnd, int bar, int show);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public static extern int EnableScrollBar(IntPtr hWnd, uint flags, uint arrows);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public static extern int BringWindowToTop(IntPtr hWnd);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public static extern int GetScrollInfo(IntPtr hwnd, int bar, ref SCROLLINFO si);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> static public extern int ScrollWindowEx(IntPtr hWnd, int dx, int dy,<br/> ref RECT rcScroll, ref RECT rcClip, IntPtr UpdateRegion, ref RECT rcInvalidated, uint flags);<br/> [DllImport("user32.dll", CharSet = CharSet.Auto)]<br/> public static extern int IsWindow(IntPtr hWnd);<br/> [DllImport("user32", CharSet = CharSet.Auto)]<br/> public static extern int GetKeyboardState(byte[] pbKeyState);<br/> [DllImport("user32")]<br/> public static extern int ToAscii(int uVirtKey, //[in] Specifies the virtual-key code to be translated. <br/> int uScanCode, // [in] Specifies the hardware scan code of the key to be translated. The high-order bit of this value is set if the key is up (not pressed). <br/> byte[] lpbKeyState, // [in] Pointer to a 256-byte array that contains the current keyboard state. Each element (byte) in the array contains the state of one key. If the high-order bit of a byte is set, the key is down (pressed). The low bit, if set, indicates that the key is toggled on. In this function, only the toggle bit of the CAPS LOCK key is relevant. The toggle state of the NUM LOCK and SCROLL LOCK keys is ignored.<br/> byte[] lpwTransKey, // [out] Pointer to the buffer that receives the translated character or characters. <br/> int fuState); // [in] Specifies whether a menu is active. This parameter must be 1 if a menu is active, or 0 otherwise.<br/> #endregion<br/><br/> #region Common Controls functions<br/> [DllImport("comctl32.dll")]<br/> public static extern bool InitCommonControlsEx(INITCOMMONCONTROLSEX icc);<br/> [DllImport("comctl32.dll")]<br/> public static extern bool InitCommonControls();<br/> [DllImport("comctl32.dll", EntryPoint = "DllGetVersion")]<br/> public extern static int GetCommonControlDLLVersion(ref DLLVERSIONINFO dvi);<br/> [DllImport("comctl32.dll")]<br/> public static extern IntPtr ImageList_Create(int width, int height, uint flags, int count, int grow);<br/> [DllImport("comctl32.dll")]<br/> public static extern bool ImageList_Destroy(IntPtr handle);<br/> [DllImport("comctl32.dll")]<br/> public static extern int ImageList_Add(IntPtr imageHandle, IntPtr hBitmap, IntPtr hMask);<br/> [DllImport("comctl32.dll")]<br/> public static extern bool ImageList_Remove(IntPtr imageHandle, int index);<br/> [DllImport("comctl32.dll")]<br/> public static extern bool ImageList_BeginDrag(IntPtr imageHandle, int imageIndex, int xHotSpot, int yHotSpot);<br/> [DllImport("comctl32.dll")]<br/> public static extern bool ImageList_DragEnter(IntPtr hWndLock, int x, int y);<br/> [DllImport("comctl32.dll")]<br/> public static extern bool ImageList_DragMove(int x, int y);<br/> [DllImport("comctl32.dll")]<br/> public static extern bool ImageList_DragLeave(IntPtr hWndLock);<br/> [DllImport("comctl32.dll")]<br/> public static extern void ImageList_EndDrag();<br/> #endregion<br/><br/> #region Win32 Macro-Like helpers<br/> public static int GET_X_LPARAM(int lParam)<br/> {<br/> return (lParam &amp; 0xffff);<br/> }<br/><br/><br/> public static int GET_Y_LPARAM(int lParam)<br/> {<br/> return (lParam &gt;&gt; 16);<br/> }<br/><br/> public static Point GetPointFromLPARAM(int lParam)<br/> {<br/> return new Point(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam));<br/> }<br/><br/> public static int LOW_ORDER(int param)<br/> {<br/> return (param &amp; 0xffff);<br/> }<br/><br/> public static int HIGH_ORDER(int param)<br/> {<br/> return (param &gt;&gt; 16);<br/> }<br/><br/> #endregion<br/><br/> }<br/><br/>}<br/></div><p>&nbsp;</p><img src="http://counter.cnblogs.com/blog/rss/2569876" width="1" height="1" alt=""/><br/><p>本文链接：<a href="http://www.cnblogs.com/jxsoft/archive/2012/06/29/2569876.html" target="_blank">http://www.cnblogs.com/jxsoft/archive/2012/06/29/2569876.html</a>，转载请注明。</p>
</content>
</entry>
<entry>
<id>
http://www.cnblogs.com/jxsoft/archive/2012/06/02/2532273.html
</id>
<title type="text">delphi 与 sqlite 参考 - 许明吉博客</title>
<summary type="text">
本文的目的在于采用流水账方式来记录学习delphi访问嵌入式数据库sqlite中的一些点滴。欢迎各位同好共同学习和批评指正。file:1 准备工作part1 delphi版本:delphi2007 for win32 update3。任意安装版本即可。sqlite dll版本:3.5.3。目前最新版本的sqlite引擎。[ http://www.sqlite.org/ ]sqlite for delphi:simple sqlite 3.0 for delphi。目前的最新版本的发布日期为27 August 2007，支持sqlite dll版本3.4.2。经简单测试，3.5.3也是可以的。自
</summary>
<published>2012-06-02T14:01:00Z</published>
<updated>2012-06-02T14:01:00Z</updated>
<author>
<name>许明吉博客</name>
<uri>http://www.cnblogs.com/jxsoft/</uri>
</author>
<link rel="alternate" href="http://www.cnblogs.com/jxsoft/archive/2012/06/02/2532273.html"/>
<link rel="alternate" type="text/html" href="http://www.cnblogs.com/jxsoft/archive/2012/06/02/2532273.html"/>
<content type="html">
<p>本文的目的在于采用流水账方式来记录学习delphi访问嵌入式数据库sqlite中的一些点滴。欢迎各位同好共同学习和批评指正。</p><p><strong><em>file:1 准备工作part1</em></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delphi版本:delphi2007 for win32 update3。任意安装版本即可。<br />sqlite dll版本:3.5.3。目前最新版本的sqlite引擎。[ <a href="http://www.sqlite.org/" rel="nofollow"><span style="text-decoration: underline;"><span style="color: #810081;">http://www.sqlite.org/</span></span></a> ]<br />sqlite for delphi:simple sqlite 3.0 for delphi。目前的最新版本的发布日期为27 August 2007，支持sqlite dll版本3.4.2。经简单测试，3.5.3也是可以的。自带demo。[ <a href="http://www.itwriting.com/sqlitesimple.php" rel="nofollow"><span style="text-decoration: underline;"><span style="color: #810081;">http://www.itwriting.com/sqlitesimple.php</span></span></a> ]</p><p><strong><em>file:2 准备工作part2</em></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;新建一个窗体应用程序工程，并设定保存的文件夹。将simple sqlite 3.0 for delphi 中的 sqlite3.pas，sqlite3table.pas，sqlite3udf.pas拷贝至工程所在的文件夹。并在工程中添加这三个文件。拷贝 sqlite.dll到编译生成exe文件的文件夹。这个要看个人的设定。</p><p><strong><em>file:3 初步测试</em></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;引用SQLiteTable3.pas单元。<br />在窗体上创建一个叫btnVersion的按钮(Tbutton)。在btnVersion的click事件中写入下面的代码。<br /><span style="background-color: #cccccc;">procedure TfrmAbout.btnVersionClick(Sender: TObject);<br />var<br />SqliteDB:TSQLiteDatabase;<br />begin<br />SqliteDB:=TSQLiteDatabase.Create('');<br />showmessage('Sqlite dll version:'+SqliteDb.version);<br />SqliteDB.Free;<br />end;<br /></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编译运行，成功的话，将会显示当前的sqlite dll的版本号，我的是3.5.3。</p><p><strong><em>file:4 简单工作原理描述</em></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在simple sqlite3.0 for delphi的几个文件中，主要用到两个文件。分别是sqlite3.pas，sqlite3table.pas。<br />sqlite3.pas实现sqlite.dll的接口外部定义。<br />sqlite3table.pas进行简单的访问函数封装。<br />在delphi中，通过sqlite3table.pas来实现对sqlite数据库的各种访问。<br />关于sqlite3udf.pas，根据作者的描述，主要用与创建用户自定义函数，具体功能未测试。</p><p><strong><em>file:5 读取数据</em></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 假设，我们有一个叫做database.db的sqlite数据库文件，在编译生成的exe文件所在的目录。里面有一个叫做countries的表格。<br />表格创建语句如下。<br /><span style="background-color: #cccccc;">CREATE TABLE "Countries" (<br />Name VARCHAR NOT NULL PRIMARY KEY UNIQUE, <br />Capital VARCHAR NOT NULL, <br />Area INTEGER NOT NULL, <br />Pop INTEGER NOT NULL, <br />PCI INTEGER NOT NULL <br />);<br /></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 我们该如何访问其中的第一条数据呢。<br /><span style="background-color: #cccccc;">var<br />SqliteDB:TSQLiteDatabase;<br />SqliteTB:TSQLiteTable;<br />begin<br />SqliteDB:=TSQLiteDatabase.Create('database.db');<br />SqliteTB:=SqliteDB.GetTable('Select * from countries');<br />显示控件1.text:=SqliteTB.FieldAsString(SqliteTB.FieldIndex['Name']);<br />显示控件2.text:=SqliteTB.FieldAsString(SqliteTB.FieldIndex['Capital']);<br />显示控件3.text:=SqliteTB.FieldAsString(SqliteTB.FieldIndex['Area']);<br />显示控件4.text:=SqliteTB.FieldAsString(SqliteTB.FieldIndex['Pop']);<br />显示控件5.text:=SqliteTB.FieldAsString(SqliteTB.FieldIndex['PCI']);<br />SqliteTB.free;<br />SqliteDB.free;<br />end;<br /></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TSQLiteTable类有两个方法，分别是Next和Previous，是用来向后和向前移动数据游标的。配合这两个方法，我们可以读取表格任意数据 内容。例如select * from countries where area &gt;8000000的数据。</p><p><strong><em>file:6 写入数据</em></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 我们可以读取数据，就可以写入数据。如何来做到呢？还是以Countries表为例。<br /><span style="background-color: #cccccc;">var<br />SqliteDB:TSQLiteDatabase;<br />begin<br />SqliteDB:=TSQLiteDatabase.Create('database.db');<br />SqliteDB.ExecSQL('Insert Into Countries (Name,Capital,Area,Pop,PCI) values ("China","Beijing",9600000,1500000000,6000)');<br />SqliteDB.Free;&nbsp; <br />end;</span><br />同样，数据的update方法也可以按照这种方法来实现。在这里可以看到,字符类数据可以用双引号来标记起来,而不是通常sqlserver的单引号标记。</p><p><strong><em>file:7 字符编码</em></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 访问过MySql数据库数据的朋友应该记得噩梦般的中文数据存取经历。数据库里用了一种编码，程序又是另一种编码，导致中文数据变成乱码。<br />sqlite中，数据库内用的是UTF-8存取，DELPHI取出的数据是ASCII编码。也就是说，我们需要在存取的同时做编码转换。<br />有这样两个方法，utf8decode()，utf8encode()。当从数据库中读取数据时，我们用utf8decode()；当向数据库中写入数据时，我们用utf8encode()；<br />例如:<br /><span style="background-color: #cccccc;">显示控件.text:=utf8decode(sltb.FieldAsString(sltb.FieldIndex['Name']));<br />SqliteDB.ExecSQL(utf8encode('Insert Into Countries (Name,Capital,Area,Pop,PCI) values ("中国","北京",9600000,1500000000,6000)'));<br /></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在有更好的方法之前，我们只能这么用&hellip;&hellip;</p><p><strong><em>file8: Blob Blob Blob</em></strong></p><p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 某些时候，我们会需要向数据库中存储和读取图片，视频，音频等信息的数据，例如：前女友们的性感照片。sqlite中有一种数据类型叫做Blob,可以满足我们的要求。如何访问和读取呢？<br />下面以在database.db数据库中PhotoLib表格中存取一个JPEG图片为例：<br /><span style="background-color: #cccccc;">CREATE TABLE "PhotoLib" (Id Integer NOT NULL PRIMARY KEY UNIQUE, <br />Photo BLOB);<br /></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 写入：<br /><span style="background-color: #cccccc;">var<br />SqliteDB: TSQLiteDatabase;<br />FS: TFileStream;<br />begin<br />SqliteDB:=TSQLiteDatabase.Create('database.db');<br />FS := TFileStream.Create('test.jpeg',fmOpenRead);<br />SqliteDB.UpdateBlob('UPDATE PhotoLib set Photo = ? WHERE ID = 1',FS);<br />FS.free;<br />SqliteDB.Free;<br />end;</span><br />读取至TImage控件显示：<br /><span style="background-color: #cccccc;">var<br />MS: TMemoryStream;<br />PIC: TJPegImage;<br />SqliteDB: TSQLiteDatabase;<br />SqliteTB: TSQLIteTable;<br />begin<br />SqliteDB:=TSQLiteDatabase.Create('database.db');<br />SqliteTB:=SqliteDB.GetTable('Select * From PhotoLib Where Id=1');<br />MS := SqliteTB.FieldAsBlob(SqliteTB.FieldIndex['photo']);<br />if (MS = nil) then<br />begin<br />showmessage('该条记录没有前女友照片数据.');<br />exit;<br />end;<br />MS.Position := 0;<br />PIC := TJPEGImage.Create;<br />PIC.LoadFromStream(ms);<br />self.Image2.Picture.Graphic := PIC;<br />MS.free;<br />PIC.Free;<br />end;</span></p><img src="http://counter.cnblogs.com/blog/rss/2532273" width="1" height="1" alt=""/><br/><p>本文链接：<a href="http://www.cnblogs.com/jxsoft/archive/2012/06/02/2532273.html" target="_blank">http://www.cnblogs.com/jxsoft/archive/2012/06/02/2532273.html</a>，转载请注明。</p>
</content>
</entry>
<entry>
<id>
http://www.cnblogs.com/jxsoft/archive/2012/03/11/2389995.html
</id>
<title type="text">delphi2010中FastReport的安装方法 - 许明吉博客</title>
<summary type="text">
一，准备工作。1.1安装Delphi2010。1.2获得FastReport 4.9.31。二，FastReport文件夹下LibD14目录添加到Delphi中的Library Path步骤：1，打开Delphi2010，打开菜单Tools->Options。 2，左侧点击Delphi Options的+号，点击Library-win32 3，在右侧框中找到Library Path，将FastReport->LibD14路径粘贴至该文本框的末尾，粘贴之前输入分号(;)。三，生成FastReport汉化文件步骤：1，运行"recompile.exe"文件，设置相应
</summary>
<published>2012-03-11T04:44:00Z</published>
<updated>2012-03-11T04:44:00Z</updated>
<author>
<name>许明吉博客</name>
<uri>http://www.cnblogs.com/jxsoft/</uri>
</author>
<link rel="alternate" href="http://www.cnblogs.com/jxsoft/archive/2012/03/11/2389995.html"/>
<link rel="alternate" type="text/html" href="http://www.cnblogs.com/jxsoft/archive/2012/03/11/2389995.html"/>
<content type="html">
<div id="cnblogs_post_body"><p><span class="Apple" style="font-size: 14px;">一，准备工作。</span></p><p>1.1安装Delphi2010。</p><p>1.2获得FastReport 4.9.31。</p><p>二，FastReport文件夹下LibD14目录添加到Delphi中的Library Path</p><p>步骤：1，打开Delphi2010，打开菜单Tools-&gt;Options。 2，左侧点击Delphi Options的+号，点击Library-win32</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3，在右侧框中找到Library Path，将FastReport-&gt;LibD14路径粘贴至该文本框的末尾，粘贴之前输入分号(;)。</p><p>三，生成FastReport汉化文件<br />步骤：1，运行"recompile.exe"文件，设置相应选项，我的设置如下：<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1，Select the compiler 设置为 Embarcadero Rad Studio 2010(Delphi，C++)。<span class="Apple" style="font-size: 14px;">(默认值)</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2，Select the FastReport Version 设置为 Enterprise。(默认值)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3，Select the TeeChart version 设置为 TeeChartStd。<span class="Apple" style="font-size: 14px;">(默认值)</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4，What you want to do 下的 Change language To: 设置为 Chinese 。（自己选择）</p><p>四，编译运行时包。</p><p>步骤：1，在Delphi中打开(File-&gt;Open)菜单。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2，编译，打开如下DPK后，在Delphi中的IDE右侧Project Manager选中该Project右键单击，然后点击Compile。</p><p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - FastReport\LibD14\fqb140.dpk<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; - FastReport\LibD14\fs14.dpk<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - FastReport\LibD14\fsDB14.dpk<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; - FastReport\LibD14\fsBDE14.dpk<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - FastReport\LibD14\fsADO14.dpk<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; - FastReport\LibD14\fsIBX14.dpk<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - FastReport\LibD14\frx14.dpk<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; - FastReport\LibD14\frxDB14.dpk<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; - FastReport\LibD14\frxADO14.dpk<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; - FastReport\LibD14\frxBDE14.dpk<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; - FastReport\LibD14\frxIBX14.dpk<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; - FastReport\LibD14\frxDBX14.dpk<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; - FastReport\LibD14\frxe14.dpk<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - FastReport\LibD14\frxcs14.dpk 这个是FastReport的Client/Server，如不需要则不需编译此文件</p><p>四，编译并安装Dcl。</p><p>步骤：1，在Delphi中打开(File-&gt;Open)菜单。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2，编译，打开如下DPK后，在Delphi中的IDE右侧Project Manager选中该Project右键单击，然后点击Compile，接着在弹出的右键菜单中点击Install。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - FastReport\LibD14\dclfs14.dpk<br />&nbsp;&nbsp; 　　　　&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - FastReport\LibD14\dclfsDB14.dpk<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - FastReport\LibD14\dclfsBDE14.dpk<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - FastReport\LibD14\dclfsADO14.dpk<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - FastReport\LibD14\dclfsIBX14.dpk</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - FastReport\LibD14\dclfrx14.dpk<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- FastReport\LibD14\dclfrxDB14.dpk<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - FastReport\LibD14\dclfrxADO14.dpk<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - FastReport\LibD14\dclfrxBDE14.dpk<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - FastReport\LibD14\dclfrxIBX14.dpk<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - FastReport\LibD14\dclfrxDBX14.dpk<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - FastReport\LibD14\dclfrxe14.dpk</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - FastReport\LibD14\dclfrxcs14.dpk 这个是FastReport的Client/Server，如不需要则不需编译、安装此文件。</p><p>五、安装结束。</p></div><img src="http://counter.cnblogs.com/blog/rss/2389995" width="1" height="1" alt=""/><br/><p>本文链接：<a href="http://www.cnblogs.com/jxsoft/archive/2012/03/11/2389995.html" target="_blank">http://www.cnblogs.com/jxsoft/archive/2012/03/11/2389995.html</a>，转载请注明。</p>
</content>
</entry>
<entry>
<id>
http://www.cnblogs.com/jxsoft/archive/2012/01/21/2328585.html
</id>
<title type="text">网站开发技术网站 - 许明吉博客</title>
<summary type="text">
http://www.cssrain.cn/http://www.uml.org.cn/http://www.htmldrive.nethttp://www.uml.org.cn/
</summary>
<published>2012-01-21T08:55:00Z</published>
<updated>2012-01-21T08:55:00Z</updated>
<author>
<name>许明吉博客</name>
<uri>http://www.cnblogs.com/jxsoft/</uri>
</author>
<link rel="alternate" href="http://www.cnblogs.com/jxsoft/archive/2012/01/21/2328585.html"/>
<link rel="alternate" type="text/html" href="http://www.cnblogs.com/jxsoft/archive/2012/01/21/2328585.html"/>
<content type="html">
<p><a href="http://www.cssrain.cn/">http://www.cssrain.cn/</a></p><p>http://www.uml.org.cn/</p><p><span style="color: #0000ee; text-decoration: underline;">http://www.htmldrive.net</span></p><p><span style="color: #0000ee; text-decoration: underline;"><a href="http://www.uml.org.cn/">http://www.uml.org.cn/</a></span></p><img src="http://counter.cnblogs.com/blog/rss/2328585" width="1" height="1" alt=""/><br/><p>本文链接：<a href="http://www.cnblogs.com/jxsoft/archive/2012/01/21/2328585.html" target="_blank">http://www.cnblogs.com/jxsoft/archive/2012/01/21/2328585.html</a>，转载请注明。</p>
</content>
</entry>
<entry>
<id>
http://www.cnblogs.com/jxsoft/archive/2012/01/17/2324786.html
</id>
<title type="text">国外金网站 - 许明吉博客</title>
<summary type="text">
www.mfg88.comhttp://www.marlinwire.com 金工厂http://www.metamation-us.com/ 金软件http://www.yellowpages.com 美国黄页http://www.uskmfg.com/sheet_metal_fabrication.htm 金工厂 机加工 图片资料比较齐全http://www.maloyalaser.com/about.php
</summary>
<published>2012-01-17T08:13:00Z</published>
<updated>2012-01-17T08:13:00Z</updated>
<author>
<name>许明吉博客</name>
<uri>http://www.cnblogs.com/jxsoft/</uri>
</author>
<link rel="alternate" href="http://www.cnblogs.com/jxsoft/archive/2012/01/17/2324786.html"/>
<link rel="alternate" type="text/html" href="http://www.cnblogs.com/jxsoft/archive/2012/01/17/2324786.html"/>
<content type="html">
<p>www.mfg88.com</p><p>http://www.marlinwire.com&nbsp;&nbsp; 金工厂</p><p>http://www.metamation-us.com/&nbsp;&nbsp; 金软件</p><p>http://www.yellowpages.com&nbsp; 美国黄页</p><p>http://www.uskmfg.com/sheet_metal_fabrication.htm&nbsp; 金工厂 机加工 图片资料比较齐全</p><p>&nbsp;</p><p><a href="http://www.maloyalaser.com/about.php">http://www.maloyalaser.com/about.php</a></p><img src="http://counter.cnblogs.com/blog/rss/2324786" width="1" height="1" alt=""/><br/><p>本文链接：<a href="http://www.cnblogs.com/jxsoft/archive/2012/01/17/2324786.html" target="_blank">http://www.cnblogs.com/jxsoft/archive/2012/01/17/2324786.html</a>，转载请注明。</p>
</content>
</entry>
</feed>